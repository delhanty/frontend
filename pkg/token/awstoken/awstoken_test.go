package awstoken_test

import (
	"context"
	"strings"
	"testing"

	jwt "github.com/dgrijalva/jwt-go"

	"github.com/linkai-io/am/am"
	"github.com/linkai-io/frontend/pkg/token/awstoken"
)

func TestDecode(t *testing.T) {
	accessKey := "eyJraWQiOiJJc3lNZW1GMjZJdThwWjJoR0ZnVTA5UTM5XC9GWkFPT0FoQ3ZaeHl6QVwvems9IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJiMTcwNTEyYy01NTA1LTRlOWItYjhiMi0zOWEwNDQ1ZmE0YzEiLCJjb2duaXRvOmdyb3VwcyI6WyJvd25lciJdLCJldmVudF9pZCI6ImY2MTFjOThiLWZlOGItMTFlOC04NzMwLTYxZmRkNTQ1MTkzMSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE1NDQ2NzM3NzEsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbVwvdXMtZWFzdC0xX09yRXNlYzF6NCIsImV4cCI6MTU0NDY3NzM3MSwiaWF0IjoxNTQ0NjczNzcxLCJqdGkiOiJhMzM5YjQxNy1kZGRkLTQwYzEtYjk2Yi0xNmI2M2ExODI3NzciLCJjbGllbnRfaWQiOiIzdWwxaGU4M2Z2a2djcHQwZWFkZ292aTBnOCIsInVzZXJuYW1lIjoiYjE3MDUxMmMtNTUwNS00ZTliLWI4YjItMzlhMDQ0NWZhNGMxIn0.ekUd2ELIk_UCb0PQbRfNyxF4z6pkewWxHWjDyySbsNdG5Jk3vSxNoTwN_UHgT5O-PsumCi4CyalzCN0bSJ8eFgPmcBz-f-f6z_mr6tMuapB_70iEGkEDfQz9Q1e2tQlT8YsKAONDejkgcSEbvrQhUqeKM5nq35-6sWPJ8jFFty3TPqBBcSgdgbXaeBRXF6kv0FKKdI-Pj9RcupZ0NULNTLCbV2rghS9F9mkQ8-BCpPs0a9sygMRWv_v7Sv5aY9GJiRSToneGAyESjT7JM3p701TVmSrdW2TzicXhnGpuInCZzzxsngzMDEec6tmTXnxM7Ih6E5kBFJ268eK3p256gQ"
	idKey := "eyJraWQiOiI1MVQxK2xwTGdVRjV6VW40TytVTDFJK3FWRDZmNThzbGNDS3JBXC9qYU93ST0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJiMTcwNTEyYy01NTA1LTRlOWItYjhiMi0zOWEwNDQ1ZmE0YzEiLCJjb2duaXRvOmdyb3VwcyI6WyJvd25lciJdLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9PckVzZWMxejQiLCJjdXN0b206b3JnbmFtZSI6ImxpbmthaS1zdXBwb3J0IiwiY29nbml0bzp1c2VybmFtZSI6ImIxNzA1MTJjLTU1MDUtNGU5Yi1iOGIyLTM5YTA0NDVmYTRjMSIsImdpdmVuX25hbWUiOiJsaW5rYWkiLCJjb2duaXRvOnJvbGVzIjpbImFybjphd3M6aWFtOjo0NDcwNjQyMTMwMjI6cm9sZVwvaGFra2VuLWRldi1mcm9udGVuZC1jb25zby1JbnRlcm5hbEFkbWluU3VwcG9ydFJvbGUtMUNXTzNRVTZKMDE4QSJdLCJhdWQiOiIzdWwxaGU4M2Z2a2djcHQwZWFkZ292aTBnOCIsImV2ZW50X2lkIjoiZjYxMWM5OGItZmU4Yi0xMWU4LTg3MzAtNjFmZGQ1NDUxOTMxIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE1NDQ2NzM3NzEsImV4cCI6MTU0NDY3NzM3MSwiaWF0IjoxNTQ0NjczNzcxLCJmYW1pbHlfbmFtZSI6InN1cHBvcnQiLCJlbWFpbCI6ImxpbmthaS1zdXBwb3J0QGxpbmthaS5pbyJ9.Dy6SwjSX00zLyBF5r0w-dE7c_iwlW7u6DO85e5rMDYpvriz0Mfatq-pOM_vFkJlwX2jJSL11-Gw3TbTJV9CTWjFpVOWp_ClVm4FOq3wPeYSsvmZAfefjwGiHw3EdwclC6aaWBSl_VslFB0WYO5oEPy9K-DKQY7xHof5rrq6JdxmyJmLUGoTEfhZwWR9srzsL9FbrsT2ZqPJvUxbEZfdJ78e_NRBbUy_sDtY_MiF10RdZDWO8MgNVAmVZw91O_NgrtCKO_0JJB6kZYOQQuJQ89Ha1bHyGzCRPvk3fYf4xaNNksfO_9k85GjHh1bJpQclpa98C5-itVu7vO_FVK0NLXA"
	org := &am.Organization{
		UserPoolID:     "us-east-1_OrEsec1z4",
		IdentityPoolID: "us-east-1:32ff50a6-0342-4b2a-851a-fcb8a7657485",
		UserPoolJWK:    `{"keys":[{"alg":"RS256","e":"AQAB","kid":"mUpMKAXd8VM0H0l2zCpv4EBnYAR8uvAkL5nVL5nNvpU=","kty":"RSA","n":"shDzv37ibQOSgd0B6rXgRQxXXVnu5M017J9M774ZqI-2zC-6Dr4LNQNyMa1iEVHOszTBi9q6izRDB31_w_mLFZGGNbmjRYsAcG74w7RhbYFcxxrzmYlXf5IW6Ffvy69NmS0--UtkirfetbhEPKBRRfQuPjTDQZ3P_axxBM2cU1SRdMASuWyMa1VW3CgZfUuTAo2otDn2UKeIZJyIuIujDd2mZ0x_5YCXy0CVV7S2y6OzcGeTCpYB5sL5ew2YjXgSAM_pV5KYF6G4vNTgcmdxXovhhVKuuwbRmD3Hj-QS9ytDKA1Fp9ara4qJBBjuKZg5S1X11R2dSwqadNALX1j3Pw","use":"sig"},{"alg":"RS256","e":"AQAB","kid":"rirUATWB9a6VuyTKw9BqZivfGX5vOAW/ooYeKPhza20=","kty":"RSA","n":"p4jn11NjErCiQvcWf2nbzrrYFSXTPDWZeNorZrgzOz_tvNQJ9eSaQd3MgJOACt794MSX2PF6qaMroz1fAf3wS9LOPYrvffpR4Ic2BFTiwJgYbiXWXtWfVE3POZ2z1jH-gbGseyw_l7Lzb-68ZDA6yXD8vvxDm5mwV80sI33WQVp7lMbfpe3GpMnaviR5u7g9rALylCjGpiUHDpGPSFZ0Tn4b73yZ1LM5J7vYq0kMLFB-fwSl5O62G5EcQZbZKgOa79DzZd5VkVFDrNZ3aEoayfKpxf5LcyFVnGLk4NHFW9ivgoqs8SzfmUhSdOLrZp2WIa27rcFF8dT4OKgsPIC5pw","use":"sig"}]}`,
	}

	at := awstoken.New("dev", "us-east-1")
	session, err := at.ExchangeCredentials(context.Background(), org, idKey, accessKey)
	if err != nil {
		t.Fatalf("error parsing id key: %v\n", err)
	}
	t.Logf("session: %s\n", session)
	//at.ExchangeCredentials(idKey, accessKey)
}

func TestUnsafeExtractID(t *testing.T) {
	at := awstoken.New("dev", "us-east-1")

	idKey := "eyJraWQiOiJcL09PaG9wZjc0YmFseERveDFLM2pNcmhmMGpwT2VNeFhsV21Xa21IWWI2dz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIzYTA5OGM1MC02MTc4LTQ0OWEtYmMwYS00MDgxMjBkYWE2MTAiLCJjb2duaXRvOmdyb3VwcyI6WyJvd25lciJdLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RYzJTZ2VvWTgiLCJjdXN0b206b3JnbmFtZSI6ImxpbmthaS1zdXBwb3J0IiwiY29nbml0bzp1c2VybmFtZSI6IjNhMDk4YzUwLTYxNzgtNDQ5YS1iYzBhLTQwODEyMGRhYTYxMCIsImdpdmVuX25hbWUiOiJsaW5rYWkiLCJjb2duaXRvOnJvbGVzIjpbImFybjphd3M6aWFtOjo0NDcwNjQyMTMwMjI6cm9sZVwvaGFra2VuLWRldi1mcm9udGVuZC1Db25zb2xlQVBJUm8tSW50ZXJuYWxBZG1pblJvbGUtMUJaUVdRTjJCVzlOMSJdLCJhdWQiOiI0ZDVnbmkxNTRjNm1hbzhhMGdnczZsajVwbyIsImV2ZW50X2lkIjoiYTk4MzM5MDQtMDI0Yy0xMWU5LWI3NzUtZTk3MjJiOTFmN2RhIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE1NDUwODYzODksImV4cCI6MTU0NTA4OTk4OSwiaWF0IjoxNTQ1MDg2Mzg5LCJmYW1pbHlfbmFtZSI6InN1cHBvcnQiLCJlbWFpbCI6ImxpbmthaS1zdXBwb3J0QGxpbmthaS5pbyJ9.flZKr9GVKIhyZEMeQjp3Q1JoevE0OgE6J3U0m-cQh5Tzqu46G53i-F6uMr7_RA-1h8WcJiWaMJwS4cVhKhJBq84MX_lw8eI2GUaJmUrI7ur1Y8yC6FP7eObeurTQeALszmEyJBKIwES-2oiAL7r6EF73Vk9bNGxfd-IYKqnwrimmiqhZCqpbJ8HvHVckf4hcI1Wz50Dv9rE-S68Ogpx9vgJxsBfPJ1Yt8k2135PqY9G9me1wCNOWXDKzHsGxnAdGWa7quGnIDFPx9-ixUpzhwK0nbuAjrQw_TDVjt3INfCMidI8FB4lPUf-uGLWbsNxJZzkQQ7-bZ1BzE7EuRLHrfA"

	tok, err := at.UnsafeExtractID(context.Background(), idKey)
	if err != nil {
		t.Fatalf("error extracting details: %v\n", err)
	}
	t.Logf("%#v\n", tok)
}

func TestUnsafeExtractAccess(t *testing.T) {
	at := awstoken.New("dev", "us-east-1")

	accessKey := "eyJraWQiOiJUczY3cE95Rk5tU2I3S3BkS1NIdXRjRDZ4XC81ZEFBYys2Wm1SR1l6YmVTcz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIzYTA5OGM1MC02MTc4LTQ0OWEtYmMwYS00MDgxMjBkYWE2MTAiLCJjb2duaXRvOmdyb3VwcyI6WyJvd25lciJdLCJldmVudF9pZCI6IjlhNmVlYWNjLTAzZjItMTFlOS1iZTEwLWY3N2RhODYxYTNhZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE1NDUyNjc2MTIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbVwvdXMtZWFzdC0xX1FjMlNnZW9ZOCIsImV4cCI6MTU0NTI3MTIxMiwiaWF0IjoxNTQ1MjY3NjEyLCJqdGkiOiI0ZDM4ZjhjYy1hNjcxLTQ3NzYtODM5YS0xYmNhNDVjNGJmYjciLCJjbGllbnRfaWQiOiI0ZDVnbmkxNTRjNm1hbzhhMGdnczZsajVwbyIsInVzZXJuYW1lIjoiM2EwOThjNTAtNjE3OC00NDlhLWJjMGEtNDA4MTIwZGFhNjEwIn0.j8psr_dX-Mekyq2ASepoqTiZFa8Cx5WwoMLxWjTo80KsfPZQvMS7952VdK_PdoViBplhmjHo_GSiBzaYBIZs4Q3vKPUdNJLRacA-CNyWDBSFn020EJZtS3b1uUt9lcjBZywrajh3Z1BcPIq-eMyHges-hA1GxGASFwmcT3DdGxl8imjurnGrbh14KWzSqjsUigUCkOElljRGg3vIPpLDD9CSfooRhK_fVlz2xL1DcTH4BdPJr4-_EeWt7ujP0P7E6Onh63q7AOxKriirpf1tiHtpnGnJDg-G8jOEHeO0A1v6atmwOTUu_fTYxcI6QjYQMNtMP7ryIc6WpYlNdIFneg"

	tok, err := at.UnsafeExtractAccess(context.Background(), accessKey)
	if err != nil {
		t.Fatalf("error extracting details: %v\n", err)
	}
	t.Logf("%#v\n", tok)
}

func TestBearer(t *testing.T) {
	at := awstoken.New("dev", "us-east-1")

	token := "Bearer eyJraWQiOiJUczY3cE95Rk5tU2I3S3BkS1NIdXRjRDZ4XC81ZEFBYys2Wm1SR1l6YmVTcz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIzYTA5OGM1MC02MTc4LTQ0OWEtYmMwYS00MDgxMjBkYWE2MTAiLCJjb2duaXRvOmdyb3VwcyI6WyJvd25lciJdLCJldmVudF9pZCI6IjlhNmVlYWNjLTAzZjItMTFlOS1iZTEwLWY3N2RhODYxYTNhZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE1NDUyNjc2MTIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbVwvdXMtZWFzdC0xX1FjMlNnZW9ZOCIsImV4cCI6MTU0NTI3MTIxMiwiaWF0IjoxNTQ1MjY3NjEyLCJqdGkiOiI0ZDM4ZjhjYy1hNjcxLTQ3NzYtODM5YS0xYmNhNDVjNGJmYjciLCJjbGllbnRfaWQiOiI0ZDVnbmkxNTRjNm1hbzhhMGdnczZsajVwbyIsInVzZXJuYW1lIjoiM2EwOThjNTAtNjE3OC00NDlhLWJjMGEtNDA4MTIwZGFhNjEwIn0.j8psr_dX-Mekyq2ASepoqTiZFa8Cx5WwoMLxWjTo80KsfPZQvMS7952VdK_PdoViBplhmjHo_GSiBzaYBIZs4Q3vKPUdNJLRacA-CNyWDBSFn020EJZtS3b1uUt9lcjBZywrajh3Z1BcPIq-eMyHges-hA1GxGASFwmcT3DdGxl8imjurnGrbh14KWzSqjsUigUCkOElljRGg3vIPpLDD9CSfooRhK_fVlz2xL1DcTH4BdPJr4-_EeWt7ujP0P7E6Onh63q7AOxKriirpf1tiHtpnGnJDg-G8jOEHeO0A1v6atmwOTUu_fTYxcI6QjYQMNtMP7ryIc6WpYlNdIFneg"
	tokenParts := strings.Split(token, "Bearer ")
	if len(tokenParts) != 2 {
		t.Fatalf("failed to split string")
	}
	t.Logf("%s\n", tokenParts[1])
	_, err := at.UnsafeExtractAccess(context.Background(), tokenParts[1])
	if err != nil {
		t.Fatalf("error extracting token: %v\n", err)
	}
}

func TestExpired(t *testing.T) {
	accessKey := "eyJraWQiOiJUczY3cE95Rk5tU2I3S3BkS1NIdXRjRDZ4XC81ZEFBYys2Wm1SR1l6YmVTcz0iLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIzYTA5OGM1MC02MTc4LTQ0OWEtYmMwYS00MDgxMjBkYWE2MTAiLCJjb2duaXRvOmdyb3VwcyI6WyJvd25lciJdLCJldmVudF9pZCI6IjlhNmVlYWNjLTAzZjItMTFlOS1iZTEwLWY3N2RhODYxYTNhZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE1NDUyNjc2MTIsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbVwvdXMtZWFzdC0xX1FjMlNnZW9ZOCIsImV4cCI6MTU0NTI3MTIxMiwiaWF0IjoxNTQ1MjY3NjEyLCJqdGkiOiI0ZDM4ZjhjYy1hNjcxLTQ3NzYtODM5YS0xYmNhNDVjNGJmYjciLCJjbGllbnRfaWQiOiI0ZDVnbmkxNTRjNm1hbzhhMGdnczZsajVwbyIsInVzZXJuYW1lIjoiM2EwOThjNTAtNjE3OC00NDlhLWJjMGEtNDA4MTIwZGFhNjEwIn0.j8psr_dX-Mekyq2ASepoqTiZFa8Cx5WwoMLxWjTo80KsfPZQvMS7952VdK_PdoViBplhmjHo_GSiBzaYBIZs4Q3vKPUdNJLRacA-CNyWDBSFn020EJZtS3b1uUt9lcjBZywrajh3Z1BcPIq-eMyHges-hA1GxGASFwmcT3DdGxl8imjurnGrbh14KWzSqjsUigUCkOElljRGg3vIPpLDD9CSfooRhK_fVlz2xL1DcTH4BdPJr4-_EeWt7ujP0P7E6Onh63q7AOxKriirpf1tiHtpnGnJDg-G8jOEHeO0A1v6atmwOTUu_fTYxcI6QjYQMNtMP7ryIc6WpYlNdIFneg"
	org := &am.Organization{
		UserPoolID:          "us-east-1_Qc2SgeoY8",
		UserPoolAppClientID: "4d5gni154c6mao8a0ggs6lj5po",
		UserPoolJWK:         `{"keys":[{"alg":"RS256","e":"AQAB","kid":"/OOhopf74balxDox1K3jMrhf0jpOeMxXlWmWkmHYb6w=","kty":"RSA","n":"ntauX0g0OH2R-25-S5oPBMSpjx1uKcb06cRlKQC2C9-QP6tzKLDFPUf3zfGbIbDEOIaxJWj9B9JieLQnQVdsFkRdGz_E2HC9ZEOh-qNZOVB_lhTJHGeftDCw5q5EOCpe96d49Maj6A9Opb9N2DSEVGn-ycEJvMJ_Hs1V19bQ6IKa3bJ8MKidUWfrw2JlQKtrbH73-T98f7A6MfvfOIL6H1fWyeJJHOv6hctVQeqf7g1XJMaaH4DmhEUdP3ZwilXwkfuEzwczjkeKO3agRBuMGZE7XNknhJEXg1IMtnGxfSCDZtEm5dXkWcfCxsxBOv39sWCDSEpj3rnEwBQdheRZkw","use":"sig"},{"alg":"RS256","e":"AQAB","kid":"Ts67pOyFNmSb7KpdKSHutcD6x/5dAAc+6ZmRGYzbeSs=","kty":"RSA","n":"lCLS7BhoON5O4HaCb1Z0oFS0oAFohvVk15tPbJxoJICw0jGrSFlvFBmjzV_TVBFLN3tUmTWzTO7Sh2T-IVU0cu1EFGR4-HcYXcIiEJJ6zQ1oxq0kHfuDd17oQGFD9SnmTM5ic77lXtcbUJlljwfv9o2quSy9xVAINk9lCnSCbSlTtYjieL5JrKw74DmGMWKTO_3vxCUykq_b6RSoi1cJAAkYykq4fDW9EbO0CDIo9y76vhQdPq-Sw1Iqsnb4qc-uJxx9uVEnusGkrH91nL2_KfDTtKeYiVJgNCEc3nQ6MPxX2CS5LiIUH0PHCGPm3cd2veNOR4NKq-kJRalwnx0HvQ","use":"sig"}]}`,
	}

	at := awstoken.New("dev", "us-east-1")
	_, err := at.ValidateAccessToken(context.Background(), org, accessKey)
	if vErr, ok := err.(*jwt.ValidationError); ok {

		if vErr.Errors == jwt.ValidationErrorExpired {
			t.Logf("Expired!\n")
		}
	}
}
