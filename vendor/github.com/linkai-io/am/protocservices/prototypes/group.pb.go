// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: prototypes/group.proto

package prototypes // import "github.com/linkai-io/am/protocservices/prototypes"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NSModuleConfig struct {
	RequestsPerSecond    int32    `protobuf:"varint,1,opt,name=RequestsPerSecond,proto3" json:"RequestsPerSecond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NSModuleConfig) Reset()         { *m = NSModuleConfig{} }
func (m *NSModuleConfig) String() string { return proto.CompactTextString(m) }
func (*NSModuleConfig) ProtoMessage()    {}
func (*NSModuleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_group_62d3c2738f72de60, []int{0}
}
func (m *NSModuleConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NSModuleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NSModuleConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NSModuleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NSModuleConfig.Merge(dst, src)
}
func (m *NSModuleConfig) XXX_Size() int {
	return m.Size()
}
func (m *NSModuleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_NSModuleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_NSModuleConfig proto.InternalMessageInfo

func (m *NSModuleConfig) GetRequestsPerSecond() int32 {
	if m != nil {
		return m.RequestsPerSecond
	}
	return 0
}

type BruteModuleConfig struct {
	RequestsPerSecond    int32    `protobuf:"varint,1,opt,name=RequestsPerSecond,proto3" json:"RequestsPerSecond,omitempty"`
	CustomSubNames       []string `protobuf:"bytes,2,rep,name=CustomSubNames" json:"CustomSubNames,omitempty"`
	MaxDepth             int32    `protobuf:"varint,3,opt,name=MaxDepth,proto3" json:"MaxDepth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BruteModuleConfig) Reset()         { *m = BruteModuleConfig{} }
func (m *BruteModuleConfig) String() string { return proto.CompactTextString(m) }
func (*BruteModuleConfig) ProtoMessage()    {}
func (*BruteModuleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_group_62d3c2738f72de60, []int{1}
}
func (m *BruteModuleConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BruteModuleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BruteModuleConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BruteModuleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BruteModuleConfig.Merge(dst, src)
}
func (m *BruteModuleConfig) XXX_Size() int {
	return m.Size()
}
func (m *BruteModuleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BruteModuleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BruteModuleConfig proto.InternalMessageInfo

func (m *BruteModuleConfig) GetRequestsPerSecond() int32 {
	if m != nil {
		return m.RequestsPerSecond
	}
	return 0
}

func (m *BruteModuleConfig) GetCustomSubNames() []string {
	if m != nil {
		return m.CustomSubNames
	}
	return nil
}

func (m *BruteModuleConfig) GetMaxDepth() int32 {
	if m != nil {
		return m.MaxDepth
	}
	return 0
}

type PortModuleConfig struct {
	RequestsPerSecond    int32    `protobuf:"varint,1,opt,name=RequestsPerSecond,proto3" json:"RequestsPerSecond,omitempty"`
	CustomWebPorts       []int32  `protobuf:"varint,2,rep,packed,name=CustomWebPorts" json:"CustomWebPorts,omitempty"`
	TCPPorts             []int32  `protobuf:"varint,3,rep,packed,name=TCPPorts" json:"TCPPorts,omitempty"`
	UDPPorts             []int32  `protobuf:"varint,4,rep,packed,name=UDPPorts" json:"UDPPorts,omitempty"`
	PortScanEnabled      bool     `protobuf:"varint,5,opt,name=PortScanEnabled,proto3" json:"PortScanEnabled,omitempty"`
	AllowedTLDs          []string `protobuf:"bytes,6,rep,name=AllowedTLDs" json:"AllowedTLDs,omitempty"`
	AllowedHosts         []string `protobuf:"bytes,7,rep,name=AllowedHosts" json:"AllowedHosts,omitempty"`
	DisallowedTLDs       []string `protobuf:"bytes,8,rep,name=DisallowedTLDs" json:"DisallowedTLDs,omitempty"`
	DisallowedHosts      []string `protobuf:"bytes,9,rep,name=DisallowedHosts" json:"DisallowedHosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortModuleConfig) Reset()         { *m = PortModuleConfig{} }
func (m *PortModuleConfig) String() string { return proto.CompactTextString(m) }
func (*PortModuleConfig) ProtoMessage()    {}
func (*PortModuleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_group_62d3c2738f72de60, []int{2}
}
func (m *PortModuleConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortModuleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortModuleConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PortModuleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortModuleConfig.Merge(dst, src)
}
func (m *PortModuleConfig) XXX_Size() int {
	return m.Size()
}
func (m *PortModuleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PortModuleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PortModuleConfig proto.InternalMessageInfo

func (m *PortModuleConfig) GetRequestsPerSecond() int32 {
	if m != nil {
		return m.RequestsPerSecond
	}
	return 0
}

func (m *PortModuleConfig) GetCustomWebPorts() []int32 {
	if m != nil {
		return m.CustomWebPorts
	}
	return nil
}

func (m *PortModuleConfig) GetTCPPorts() []int32 {
	if m != nil {
		return m.TCPPorts
	}
	return nil
}

func (m *PortModuleConfig) GetUDPPorts() []int32 {
	if m != nil {
		return m.UDPPorts
	}
	return nil
}

func (m *PortModuleConfig) GetPortScanEnabled() bool {
	if m != nil {
		return m.PortScanEnabled
	}
	return false
}

func (m *PortModuleConfig) GetAllowedTLDs() []string {
	if m != nil {
		return m.AllowedTLDs
	}
	return nil
}

func (m *PortModuleConfig) GetAllowedHosts() []string {
	if m != nil {
		return m.AllowedHosts
	}
	return nil
}

func (m *PortModuleConfig) GetDisallowedTLDs() []string {
	if m != nil {
		return m.DisallowedTLDs
	}
	return nil
}

func (m *PortModuleConfig) GetDisallowedHosts() []string {
	if m != nil {
		return m.DisallowedHosts
	}
	return nil
}

type WebModuleConfig struct {
	RequestsPerSecond     int32    `protobuf:"varint,1,opt,name=RequestsPerSecond,proto3" json:"RequestsPerSecond,omitempty"`
	TakeScreenShots       bool     `protobuf:"varint,2,opt,name=TakeScreenShots,proto3" json:"TakeScreenShots,omitempty"`
	MaxLinks              int32    `protobuf:"varint,3,opt,name=MaxLinks,proto3" json:"MaxLinks,omitempty"`
	ExtractJS             bool     `protobuf:"varint,4,opt,name=ExtractJS,proto3" json:"ExtractJS,omitempty"`
	FingerprintFrameworks bool     `protobuf:"varint,5,opt,name=FingerprintFrameworks,proto3" json:"FingerprintFrameworks,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *WebModuleConfig) Reset()         { *m = WebModuleConfig{} }
func (m *WebModuleConfig) String() string { return proto.CompactTextString(m) }
func (*WebModuleConfig) ProtoMessage()    {}
func (*WebModuleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_group_62d3c2738f72de60, []int{3}
}
func (m *WebModuleConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebModuleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebModuleConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WebModuleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebModuleConfig.Merge(dst, src)
}
func (m *WebModuleConfig) XXX_Size() int {
	return m.Size()
}
func (m *WebModuleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WebModuleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WebModuleConfig proto.InternalMessageInfo

func (m *WebModuleConfig) GetRequestsPerSecond() int32 {
	if m != nil {
		return m.RequestsPerSecond
	}
	return 0
}

func (m *WebModuleConfig) GetTakeScreenShots() bool {
	if m != nil {
		return m.TakeScreenShots
	}
	return false
}

func (m *WebModuleConfig) GetMaxLinks() int32 {
	if m != nil {
		return m.MaxLinks
	}
	return 0
}

func (m *WebModuleConfig) GetExtractJS() bool {
	if m != nil {
		return m.ExtractJS
	}
	return false
}

func (m *WebModuleConfig) GetFingerprintFrameworks() bool {
	if m != nil {
		return m.FingerprintFrameworks
	}
	return false
}

type KeywordModuleConfig struct {
	Keywords             []string `protobuf:"bytes,1,rep,name=Keywords" json:"Keywords,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeywordModuleConfig) Reset()         { *m = KeywordModuleConfig{} }
func (m *KeywordModuleConfig) String() string { return proto.CompactTextString(m) }
func (*KeywordModuleConfig) ProtoMessage()    {}
func (*KeywordModuleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_group_62d3c2738f72de60, []int{4}
}
func (m *KeywordModuleConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeywordModuleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeywordModuleConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KeywordModuleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeywordModuleConfig.Merge(dst, src)
}
func (m *KeywordModuleConfig) XXX_Size() int {
	return m.Size()
}
func (m *KeywordModuleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_KeywordModuleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_KeywordModuleConfig proto.InternalMessageInfo

func (m *KeywordModuleConfig) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

type ModuleConfiguration struct {
	NSConfig             *NSModuleConfig      `protobuf:"bytes,1,opt,name=NSConfig" json:"NSConfig,omitempty"`
	BruteConfig          *BruteModuleConfig   `protobuf:"bytes,2,opt,name=BruteConfig" json:"BruteConfig,omitempty"`
	PortConfig           *PortModuleConfig    `protobuf:"bytes,3,opt,name=PortConfig" json:"PortConfig,omitempty"`
	WebModuleConfig      *WebModuleConfig     `protobuf:"bytes,4,opt,name=WebModuleConfig" json:"WebModuleConfig,omitempty"`
	KeywordModuleConfig  *KeywordModuleConfig `protobuf:"bytes,5,opt,name=KeywordModuleConfig" json:"KeywordModuleConfig,omitempty"`
	DailyScanSchedules   []int64              `protobuf:"varint,6,rep,packed,name=DailyScanSchedules" json:"DailyScanSchedules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ModuleConfiguration) Reset()         { *m = ModuleConfiguration{} }
func (m *ModuleConfiguration) String() string { return proto.CompactTextString(m) }
func (*ModuleConfiguration) ProtoMessage()    {}
func (*ModuleConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_group_62d3c2738f72de60, []int{5}
}
func (m *ModuleConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ModuleConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleConfiguration.Merge(dst, src)
}
func (m *ModuleConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ModuleConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleConfiguration proto.InternalMessageInfo

func (m *ModuleConfiguration) GetNSConfig() *NSModuleConfig {
	if m != nil {
		return m.NSConfig
	}
	return nil
}

func (m *ModuleConfiguration) GetBruteConfig() *BruteModuleConfig {
	if m != nil {
		return m.BruteConfig
	}
	return nil
}

func (m *ModuleConfiguration) GetPortConfig() *PortModuleConfig {
	if m != nil {
		return m.PortConfig
	}
	return nil
}

func (m *ModuleConfiguration) GetWebModuleConfig() *WebModuleConfig {
	if m != nil {
		return m.WebModuleConfig
	}
	return nil
}

func (m *ModuleConfiguration) GetKeywordModuleConfig() *KeywordModuleConfig {
	if m != nil {
		return m.KeywordModuleConfig
	}
	return nil
}

func (m *ModuleConfiguration) GetDailyScanSchedules() []int64 {
	if m != nil {
		return m.DailyScanSchedules
	}
	return nil
}

type Group struct {
	OrgID                int32                `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32                `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	GroupName            string               `protobuf:"bytes,3,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	CreationTime         int64                `protobuf:"varint,4,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`
	CreatedBy            string               `protobuf:"bytes,5,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	OriginalInputS3URL   string               `protobuf:"bytes,6,opt,name=OriginalInputS3URL,proto3" json:"OriginalInputS3URL,omitempty"`
	ModifiedTime         int64                `protobuf:"varint,7,opt,name=ModifiedTime,proto3" json:"ModifiedTime,omitempty"`
	ModifiedBy           string               `protobuf:"bytes,8,opt,name=ModifiedBy,proto3" json:"ModifiedBy,omitempty"`
	ModuleConfiguration  *ModuleConfiguration `protobuf:"bytes,9,opt,name=ModuleConfiguration" json:"ModuleConfiguration,omitempty"`
	Paused               bool                 `protobuf:"varint,10,opt,name=Paused,proto3" json:"Paused,omitempty"`
	Deleted              bool                 `protobuf:"varint,11,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	CreatedByID          int32                `protobuf:"varint,12,opt,name=CreatedByID,proto3" json:"CreatedByID,omitempty"`
	ModifiedByID         int32                `protobuf:"varint,13,opt,name=ModifiedByID,proto3" json:"ModifiedByID,omitempty"`
	LastPausedTime       int64                `protobuf:"varint,14,opt,name=LastPausedTime,proto3" json:"LastPausedTime,omitempty"`
	ArchiveAfterDays     int32                `protobuf:"varint,15,opt,name=ArchiveAfterDays,proto3" json:"ArchiveAfterDays,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_group_62d3c2738f72de60, []int{6}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(dst, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *Group) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *Group) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *Group) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *Group) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Group) GetOriginalInputS3URL() string {
	if m != nil {
		return m.OriginalInputS3URL
	}
	return ""
}

func (m *Group) GetModifiedTime() int64 {
	if m != nil {
		return m.ModifiedTime
	}
	return 0
}

func (m *Group) GetModifiedBy() string {
	if m != nil {
		return m.ModifiedBy
	}
	return ""
}

func (m *Group) GetModuleConfiguration() *ModuleConfiguration {
	if m != nil {
		return m.ModuleConfiguration
	}
	return nil
}

func (m *Group) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func (m *Group) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Group) GetCreatedByID() int32 {
	if m != nil {
		return m.CreatedByID
	}
	return 0
}

func (m *Group) GetModifiedByID() int32 {
	if m != nil {
		return m.ModifiedByID
	}
	return 0
}

func (m *Group) GetLastPausedTime() int64 {
	if m != nil {
		return m.LastPausedTime
	}
	return 0
}

func (m *Group) GetArchiveAfterDays() int32 {
	if m != nil {
		return m.ArchiveAfterDays
	}
	return 0
}

type ScanGroupFilter struct {
	Start                int64       `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	Limit                int32       `protobuf:"varint,2,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Filters              *FilterType `protobuf:"bytes,3,opt,name=Filters" json:"Filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ScanGroupFilter) Reset()         { *m = ScanGroupFilter{} }
func (m *ScanGroupFilter) String() string { return proto.CompactTextString(m) }
func (*ScanGroupFilter) ProtoMessage()    {}
func (*ScanGroupFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_group_62d3c2738f72de60, []int{7}
}
func (m *ScanGroupFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanGroupFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanGroupFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ScanGroupFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanGroupFilter.Merge(dst, src)
}
func (m *ScanGroupFilter) XXX_Size() int {
	return m.Size()
}
func (m *ScanGroupFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanGroupFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ScanGroupFilter proto.InternalMessageInfo

func (m *ScanGroupFilter) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ScanGroupFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ScanGroupFilter) GetFilters() *FilterType {
	if m != nil {
		return m.Filters
	}
	return nil
}

type GroupStats struct {
	OrgID                int32    `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32    `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	ActiveAddresses      int32    `protobuf:"varint,3,opt,name=ActiveAddresses,proto3" json:"ActiveAddresses,omitempty"`
	BatchSize            int32    `protobuf:"varint,4,opt,name=BatchSize,proto3" json:"BatchSize,omitempty"`
	LastUpdated          int64    `protobuf:"varint,5,opt,name=LastUpdated,proto3" json:"LastUpdated,omitempty"`
	BatchStart           int64    `protobuf:"varint,6,opt,name=BatchStart,proto3" json:"BatchStart,omitempty"`
	BatchEnd             int64    `protobuf:"varint,7,opt,name=BatchEnd,proto3" json:"BatchEnd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupStats) Reset()         { *m = GroupStats{} }
func (m *GroupStats) String() string { return proto.CompactTextString(m) }
func (*GroupStats) ProtoMessage()    {}
func (*GroupStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_group_62d3c2738f72de60, []int{8}
}
func (m *GroupStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GroupStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupStats.Merge(dst, src)
}
func (m *GroupStats) XXX_Size() int {
	return m.Size()
}
func (m *GroupStats) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupStats.DiscardUnknown(m)
}

var xxx_messageInfo_GroupStats proto.InternalMessageInfo

func (m *GroupStats) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *GroupStats) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *GroupStats) GetActiveAddresses() int32 {
	if m != nil {
		return m.ActiveAddresses
	}
	return 0
}

func (m *GroupStats) GetBatchSize() int32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *GroupStats) GetLastUpdated() int64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func (m *GroupStats) GetBatchStart() int64 {
	if m != nil {
		return m.BatchStart
	}
	return 0
}

func (m *GroupStats) GetBatchEnd() int64 {
	if m != nil {
		return m.BatchEnd
	}
	return 0
}

func init() {
	proto.RegisterType((*NSModuleConfig)(nil), "NSModuleConfig")
	proto.RegisterType((*BruteModuleConfig)(nil), "BruteModuleConfig")
	proto.RegisterType((*PortModuleConfig)(nil), "PortModuleConfig")
	proto.RegisterType((*WebModuleConfig)(nil), "WebModuleConfig")
	proto.RegisterType((*KeywordModuleConfig)(nil), "KeywordModuleConfig")
	proto.RegisterType((*ModuleConfiguration)(nil), "ModuleConfiguration")
	proto.RegisterType((*Group)(nil), "Group")
	proto.RegisterType((*ScanGroupFilter)(nil), "ScanGroupFilter")
	proto.RegisterType((*GroupStats)(nil), "GroupStats")
}
func (m *NSModuleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NSModuleConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestsPerSecond != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.RequestsPerSecond))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BruteModuleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BruteModuleConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestsPerSecond != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.RequestsPerSecond))
	}
	if len(m.CustomSubNames) > 0 {
		for _, s := range m.CustomSubNames {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.MaxDepth != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.MaxDepth))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PortModuleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortModuleConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestsPerSecond != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.RequestsPerSecond))
	}
	if len(m.CustomWebPorts) > 0 {
		dAtA2 := make([]byte, len(m.CustomWebPorts)*10)
		var j1 int
		for _, num1 := range m.CustomWebPorts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroup(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.TCPPorts) > 0 {
		dAtA4 := make([]byte, len(m.TCPPorts)*10)
		var j3 int
		for _, num1 := range m.TCPPorts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroup(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.UDPPorts) > 0 {
		dAtA6 := make([]byte, len(m.UDPPorts)*10)
		var j5 int
		for _, num1 := range m.UDPPorts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintGroup(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.PortScanEnabled {
		dAtA[i] = 0x28
		i++
		if m.PortScanEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AllowedTLDs) > 0 {
		for _, s := range m.AllowedTLDs {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AllowedHosts) > 0 {
		for _, s := range m.AllowedHosts {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DisallowedTLDs) > 0 {
		for _, s := range m.DisallowedTLDs {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DisallowedHosts) > 0 {
		for _, s := range m.DisallowedHosts {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WebModuleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebModuleConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestsPerSecond != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.RequestsPerSecond))
	}
	if m.TakeScreenShots {
		dAtA[i] = 0x10
		i++
		if m.TakeScreenShots {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MaxLinks != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.MaxLinks))
	}
	if m.ExtractJS {
		dAtA[i] = 0x20
		i++
		if m.ExtractJS {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FingerprintFrameworks {
		dAtA[i] = 0x28
		i++
		if m.FingerprintFrameworks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KeywordModuleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeywordModuleConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ModuleConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NSConfig != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.NSConfig.Size()))
		n7, err := m.NSConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.BruteConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.BruteConfig.Size()))
		n8, err := m.BruteConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.PortConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.PortConfig.Size()))
		n9, err := m.PortConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.WebModuleConfig != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.WebModuleConfig.Size()))
		n10, err := m.WebModuleConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.KeywordModuleConfig != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.KeywordModuleConfig.Size()))
		n11, err := m.KeywordModuleConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.DailyScanSchedules) > 0 {
		dAtA13 := make([]byte, len(m.DailyScanSchedules)*10)
		var j12 int
		for _, num1 := range m.DailyScanSchedules {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintGroup(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupID))
	}
	if len(m.GroupName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroup(dAtA, i, uint64(len(m.GroupName)))
		i += copy(dAtA[i:], m.GroupName)
	}
	if m.CreationTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.CreationTime))
	}
	if len(m.CreatedBy) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGroup(dAtA, i, uint64(len(m.CreatedBy)))
		i += copy(dAtA[i:], m.CreatedBy)
	}
	if len(m.OriginalInputS3URL) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGroup(dAtA, i, uint64(len(m.OriginalInputS3URL)))
		i += copy(dAtA[i:], m.OriginalInputS3URL)
	}
	if m.ModifiedTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.ModifiedTime))
	}
	if len(m.ModifiedBy) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGroup(dAtA, i, uint64(len(m.ModifiedBy)))
		i += copy(dAtA[i:], m.ModifiedBy)
	}
	if m.ModuleConfiguration != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.ModuleConfiguration.Size()))
		n14, err := m.ModuleConfiguration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Paused {
		dAtA[i] = 0x50
		i++
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Deleted {
		dAtA[i] = 0x58
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CreatedByID != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.CreatedByID))
	}
	if m.ModifiedByID != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.ModifiedByID))
	}
	if m.LastPausedTime != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.LastPausedTime))
	}
	if m.ArchiveAfterDays != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.ArchiveAfterDays))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ScanGroupFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanGroupFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.Start))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.Limit))
	}
	if m.Filters != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.Filters.Size()))
		n15, err := m.Filters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupID))
	}
	if m.ActiveAddresses != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.ActiveAddresses))
	}
	if m.BatchSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.BatchSize))
	}
	if m.LastUpdated != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.LastUpdated))
	}
	if m.BatchStart != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.BatchStart))
	}
	if m.BatchEnd != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGroup(dAtA, i, uint64(m.BatchEnd))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintGroup(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NSModuleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestsPerSecond != 0 {
		n += 1 + sovGroup(uint64(m.RequestsPerSecond))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BruteModuleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestsPerSecond != 0 {
		n += 1 + sovGroup(uint64(m.RequestsPerSecond))
	}
	if len(m.CustomSubNames) > 0 {
		for _, s := range m.CustomSubNames {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if m.MaxDepth != 0 {
		n += 1 + sovGroup(uint64(m.MaxDepth))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PortModuleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestsPerSecond != 0 {
		n += 1 + sovGroup(uint64(m.RequestsPerSecond))
	}
	if len(m.CustomWebPorts) > 0 {
		l = 0
		for _, e := range m.CustomWebPorts {
			l += sovGroup(uint64(e))
		}
		n += 1 + sovGroup(uint64(l)) + l
	}
	if len(m.TCPPorts) > 0 {
		l = 0
		for _, e := range m.TCPPorts {
			l += sovGroup(uint64(e))
		}
		n += 1 + sovGroup(uint64(l)) + l
	}
	if len(m.UDPPorts) > 0 {
		l = 0
		for _, e := range m.UDPPorts {
			l += sovGroup(uint64(e))
		}
		n += 1 + sovGroup(uint64(l)) + l
	}
	if m.PortScanEnabled {
		n += 2
	}
	if len(m.AllowedTLDs) > 0 {
		for _, s := range m.AllowedTLDs {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if len(m.AllowedHosts) > 0 {
		for _, s := range m.AllowedHosts {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if len(m.DisallowedTLDs) > 0 {
		for _, s := range m.DisallowedTLDs {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if len(m.DisallowedHosts) > 0 {
		for _, s := range m.DisallowedHosts {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebModuleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestsPerSecond != 0 {
		n += 1 + sovGroup(uint64(m.RequestsPerSecond))
	}
	if m.TakeScreenShots {
		n += 2
	}
	if m.MaxLinks != 0 {
		n += 1 + sovGroup(uint64(m.MaxLinks))
	}
	if m.ExtractJS {
		n += 2
	}
	if m.FingerprintFrameworks {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeywordModuleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModuleConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NSConfig != nil {
		l = m.NSConfig.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.BruteConfig != nil {
		l = m.BruteConfig.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.PortConfig != nil {
		l = m.PortConfig.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.WebModuleConfig != nil {
		l = m.WebModuleConfig.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.KeywordModuleConfig != nil {
		l = m.KeywordModuleConfig.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if len(m.DailyScanSchedules) > 0 {
		l = 0
		for _, e := range m.DailyScanSchedules {
			l += sovGroup(uint64(e))
		}
		n += 1 + sovGroup(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovGroup(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovGroup(uint64(m.GroupID))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.CreationTime != 0 {
		n += 1 + sovGroup(uint64(m.CreationTime))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.OriginalInputS3URL)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.ModifiedTime != 0 {
		n += 1 + sovGroup(uint64(m.ModifiedTime))
	}
	l = len(m.ModifiedBy)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.ModuleConfiguration != nil {
		l = m.ModuleConfiguration.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.Paused {
		n += 2
	}
	if m.Deleted {
		n += 2
	}
	if m.CreatedByID != 0 {
		n += 1 + sovGroup(uint64(m.CreatedByID))
	}
	if m.ModifiedByID != 0 {
		n += 1 + sovGroup(uint64(m.ModifiedByID))
	}
	if m.LastPausedTime != 0 {
		n += 1 + sovGroup(uint64(m.LastPausedTime))
	}
	if m.ArchiveAfterDays != 0 {
		n += 1 + sovGroup(uint64(m.ArchiveAfterDays))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScanGroupFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovGroup(uint64(m.Start))
	}
	if m.Limit != 0 {
		n += 1 + sovGroup(uint64(m.Limit))
	}
	if m.Filters != nil {
		l = m.Filters.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovGroup(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovGroup(uint64(m.GroupID))
	}
	if m.ActiveAddresses != 0 {
		n += 1 + sovGroup(uint64(m.ActiveAddresses))
	}
	if m.BatchSize != 0 {
		n += 1 + sovGroup(uint64(m.BatchSize))
	}
	if m.LastUpdated != 0 {
		n += 1 + sovGroup(uint64(m.LastUpdated))
	}
	if m.BatchStart != 0 {
		n += 1 + sovGroup(uint64(m.BatchStart))
	}
	if m.BatchEnd != 0 {
		n += 1 + sovGroup(uint64(m.BatchEnd))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGroup(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGroup(x uint64) (n int) {
	return sovGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NSModuleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NSModuleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NSModuleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestsPerSecond", wireType)
			}
			m.RequestsPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestsPerSecond |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BruteModuleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BruteModuleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BruteModuleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestsPerSecond", wireType)
			}
			m.RequestsPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestsPerSecond |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSubNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomSubNames = append(m.CustomSubNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDepth", wireType)
			}
			m.MaxDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDepth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortModuleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortModuleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortModuleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestsPerSecond", wireType)
			}
			m.RequestsPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestsPerSecond |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CustomWebPorts = append(m.CustomWebPorts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroup
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CustomWebPorts) == 0 {
					m.CustomWebPorts = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CustomWebPorts = append(m.CustomWebPorts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomWebPorts", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TCPPorts = append(m.TCPPorts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroup
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TCPPorts) == 0 {
					m.TCPPorts = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TCPPorts = append(m.TCPPorts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TCPPorts", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UDPPorts = append(m.UDPPorts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroup
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UDPPorts) == 0 {
					m.UDPPorts = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UDPPorts = append(m.UDPPorts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UDPPorts", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortScanEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PortScanEnabled = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedTLDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedTLDs = append(m.AllowedTLDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedHosts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedHosts = append(m.AllowedHosts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisallowedTLDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisallowedTLDs = append(m.DisallowedTLDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisallowedHosts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisallowedHosts = append(m.DisallowedHosts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebModuleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebModuleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebModuleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestsPerSecond", wireType)
			}
			m.RequestsPerSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestsPerSecond |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeScreenShots", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TakeScreenShots = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLinks", wireType)
			}
			m.MaxLinks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLinks |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtractJS", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExtractJS = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FingerprintFrameworks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FingerprintFrameworks = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeywordModuleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeywordModuleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeywordModuleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = append(m.Keywords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NSConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NSConfig == nil {
				m.NSConfig = &NSModuleConfig{}
			}
			if err := m.NSConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BruteConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BruteConfig == nil {
				m.BruteConfig = &BruteModuleConfig{}
			}
			if err := m.BruteConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PortConfig == nil {
				m.PortConfig = &PortModuleConfig{}
			}
			if err := m.PortConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebModuleConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WebModuleConfig == nil {
				m.WebModuleConfig = &WebModuleConfig{}
			}
			if err := m.WebModuleConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeywordModuleConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeywordModuleConfig == nil {
				m.KeywordModuleConfig = &KeywordModuleConfig{}
			}
			if err := m.KeywordModuleConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DailyScanSchedules = append(m.DailyScanSchedules, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGroup
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DailyScanSchedules) == 0 {
					m.DailyScanSchedules = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGroup
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DailyScanSchedules = append(m.DailyScanSchedules, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyScanSchedules", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalInputS3URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalInputS3URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedTime", wireType)
			}
			m.ModifiedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModifiedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleConfiguration == nil {
				m.ModuleConfiguration = &ModuleConfiguration{}
			}
			if err := m.ModuleConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedByID", wireType)
			}
			m.CreatedByID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedByID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedByID", wireType)
			}
			m.ModifiedByID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedByID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPausedTime", wireType)
			}
			m.LastPausedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPausedTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchiveAfterDays", wireType)
			}
			m.ArchiveAfterDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArchiveAfterDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanGroupFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanGroupFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanGroupFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filters == nil {
				m.Filters = &FilterType{}
			}
			if err := m.Filters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveAddresses", wireType)
			}
			m.ActiveAddresses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveAddresses |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
			}
			m.BatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchStart", wireType)
			}
			m.BatchStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchStart |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchEnd", wireType)
			}
			m.BatchEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchEnd |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGroup
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGroup
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGroup(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGroup = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroup   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("prototypes/group.proto", fileDescriptor_group_62d3c2738f72de60) }

var fileDescriptor_group_62d3c2738f72de60 = []byte{
	// 904 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x6f, 0xe2, 0x46,
	0x18, 0xae, 0xc3, 0x42, 0x60, 0xd8, 0x86, 0x64, 0x76, 0xbb, 0xb2, 0xd2, 0x0a, 0x45, 0x96, 0x5a,
	0xa1, 0x7e, 0x80, 0x92, 0xdd, 0x53, 0x0f, 0x95, 0x02, 0x4e, 0xda, 0xb4, 0x24, 0x1b, 0x8d, 0x89,
	0x56, 0xea, 0x6d, 0xb0, 0xdf, 0xc0, 0x28, 0xc6, 0xa6, 0x33, 0xe3, 0xcd, 0xd2, 0x7b, 0xff, 0x43,
	0x6f, 0xfd, 0x3b, 0x3d, 0xf6, 0xda, 0x53, 0x2b, 0xfa, 0x47, 0xaa, 0x79, 0x6d, 0xc0, 0x18, 0x5f,
	0xfa, 0x71, 0xf3, 0xf3, 0xbc, 0xcf, 0x7c, 0x3d, 0xef, 0x33, 0x03, 0xe4, 0xc5, 0x5c, 0xc6, 0x3a,
	0xd6, 0x8b, 0x39, 0xa8, 0xde, 0x44, 0xc6, 0xc9, 0xbc, 0x8b, 0xc4, 0xf1, 0x87, 0x39, 0xfe, 0x5e,
	0x84, 0x1a, 0xa4, 0xf9, 0x4e, 0x8b, 0xce, 0x57, 0xe4, 0xe0, 0xc6, 0xbb, 0x8e, 0x83, 0x24, 0x84,
	0x41, 0x1c, 0xdd, 0x8b, 0x09, 0xfd, 0x9c, 0x1c, 0x31, 0xf8, 0x21, 0x01, 0xa5, 0xd5, 0x2d, 0x48,
	0x0f, 0xfc, 0x38, 0x0a, 0x6c, 0xeb, 0xc4, 0xea, 0x54, 0xd9, 0x6e, 0xc1, 0xf9, 0xc9, 0x22, 0x47,
	0x7d, 0x99, 0x68, 0xf8, 0xf7, 0x73, 0xd0, 0x4f, 0xc8, 0xc1, 0x20, 0x51, 0x3a, 0x9e, 0x79, 0xc9,
	0xf8, 0x86, 0xcf, 0x40, 0xd9, 0x7b, 0x27, 0x95, 0x4e, 0x83, 0x15, 0x58, 0x7a, 0x4c, 0xea, 0xd7,
	0xfc, 0x9d, 0x0b, 0x73, 0x3d, 0xb5, 0x2b, 0x38, 0xd9, 0x1a, 0x3b, 0xcb, 0x3d, 0x72, 0x78, 0x1b,
	0x4b, 0xfd, 0x7f, 0x6c, 0xe3, 0x0d, 0x8c, 0xcd, 0x54, 0xe9, 0x36, 0xaa, 0xac, 0xc0, 0x9a, 0x6d,
	0x8c, 0x06, 0xb7, 0xa9, 0xa2, 0x82, 0x8a, 0x35, 0x36, 0xb5, 0x3b, 0x37, 0xab, 0x3d, 0x49, 0x6b,
	0x2b, 0x4c, 0x3b, 0xa4, 0x65, 0x3e, 0x3c, 0x9f, 0x47, 0x17, 0x11, 0x1f, 0x87, 0x10, 0xd8, 0xd5,
	0x13, 0xab, 0x53, 0x67, 0x45, 0x9a, 0x9e, 0x90, 0xe6, 0x79, 0x18, 0xc6, 0x8f, 0x10, 0x8c, 0x86,
	0xae, 0xb2, 0x6b, 0xe8, 0x46, 0x9e, 0xa2, 0x0e, 0x79, 0x9a, 0xc1, 0x6f, 0x62, 0xa5, 0x95, 0xbd,
	0x8f, 0x92, 0x2d, 0xce, 0x9c, 0xc7, 0x15, 0x8a, 0xe7, 0x26, 0xaa, 0xa7, 0xb6, 0x6e, 0xb3, 0x66,
	0x5f, 0x1b, 0x26, 0x9d, 0xae, 0x81, 0xc2, 0x22, 0xed, 0xfc, 0x6e, 0x91, 0xd6, 0x1b, 0x18, 0xff,
	0x07, 0x8f, 0x3b, 0xa4, 0x35, 0xe2, 0x0f, 0xe0, 0xf9, 0x12, 0x20, 0xf2, 0xa6, 0x31, 0x9a, 0x8c,
	0x1e, 0x14, 0xe8, 0xac, 0xd9, 0x43, 0x11, 0x3d, 0xa8, 0x5c, 0xb3, 0x11, 0xd3, 0x8f, 0x48, 0xe3,
	0xe2, 0x9d, 0x96, 0xdc, 0xd7, 0xdf, 0x7a, 0xf6, 0x13, 0x1c, 0xbf, 0x21, 0xe8, 0x2b, 0xf2, 0xc1,
	0xa5, 0x88, 0x26, 0x20, 0xe7, 0x52, 0x44, 0xfa, 0x52, 0xf2, 0x19, 0x3c, 0xc6, 0xf2, 0x41, 0x65,
	0x6e, 0x97, 0x17, 0x9d, 0x53, 0xf2, 0xec, 0x3b, 0x58, 0x3c, 0xc6, 0x32, 0xd8, 0x3a, 0xde, 0x31,
	0xa9, 0x67, 0xb4, 0xb2, 0x2d, 0x74, 0x65, 0x8d, 0x9d, 0x3f, 0xf6, 0xc8, 0xb3, 0xbc, 0x38, 0x91,
	0x5c, 0x8b, 0x38, 0xa2, 0x9f, 0x91, 0xfa, 0x8d, 0x97, 0x52, 0xe8, 0x44, 0xf3, 0xac, 0xd5, 0xdd,
	0xbe, 0x64, 0x6c, 0x2d, 0xa0, 0xaf, 0x48, 0x13, 0xef, 0x4f, 0xa6, 0xdf, 0x43, 0x3d, 0xed, 0xee,
	0xdc, 0x29, 0x96, 0x97, 0xd1, 0x53, 0x42, 0x4c, 0x68, 0xb2, 0x41, 0x15, 0x1c, 0x74, 0xd4, 0x2d,
	0x5e, 0x00, 0x96, 0x13, 0xd1, 0x2f, 0x77, 0x7a, 0x87, 0xd6, 0x35, 0xcf, 0x0e, 0xbb, 0x05, 0x9e,
	0xed, 0x34, 0xf9, 0xb2, 0xd4, 0x1c, 0x34, 0xb4, 0x79, 0xf6, 0xbc, 0x5b, 0x52, 0x63, 0xa5, 0x6e,
	0x76, 0x09, 0x75, 0xb9, 0x08, 0x17, 0x26, 0xec, 0x9e, 0x3f, 0x05, 0x53, 0x4a, 0xf3, 0x5d, 0x61,
	0x25, 0x15, 0xe7, 0x97, 0x27, 0xa4, 0xfa, 0xb5, 0x79, 0xca, 0xe8, 0x73, 0x52, 0x7d, 0x2d, 0x27,
	0x57, 0x6e, 0x16, 0xad, 0x14, 0x50, 0x9b, 0xec, 0x63, 0xf9, 0xca, 0x45, 0xe3, 0xaa, 0x6c, 0x05,
	0x4d, 0x44, 0xf0, 0xd3, 0xbc, 0x1c, 0xe8, 0x4f, 0x83, 0x6d, 0x08, 0x73, 0x7d, 0x06, 0x12, 0xb0,
	0x5b, 0x23, 0x31, 0x03, 0x34, 0xa2, 0xc2, 0xb6, 0x38, 0x33, 0x03, 0x62, 0x08, 0xfa, 0x0b, 0x3c,
	0x69, 0x83, 0x6d, 0x08, 0x73, 0x92, 0xd7, 0x52, 0x4c, 0x44, 0xc4, 0xc3, 0xab, 0x68, 0x9e, 0x68,
	0xef, 0xe5, 0x1d, 0x1b, 0xda, 0x35, 0x94, 0x95, 0x54, 0xcc, 0x8a, 0xd7, 0x71, 0x20, 0xee, 0x05,
	0x04, 0xb8, 0xe2, 0x7e, 0xba, 0x62, 0x9e, 0xa3, 0x6d, 0x42, 0x56, 0xb8, 0xbf, 0xb0, 0xeb, 0x38,
	0x57, 0x8e, 0x31, 0x5d, 0x28, 0x89, 0x9b, 0xdd, 0xc8, 0xba, 0x50, 0x52, 0x63, 0xa5, 0xf9, 0x7c,
	0x41, 0x6a, 0xb7, 0x3c, 0x51, 0x10, 0xd8, 0x04, 0x6f, 0x44, 0x86, 0x8c, 0x9b, 0x2e, 0x84, 0xa0,
	0x21, 0xb0, 0x9b, 0x58, 0x58, 0x41, 0xf3, 0x20, 0xad, 0x8f, 0x7e, 0xe5, 0xda, 0x4f, 0xd1, 0xeb,
	0x3c, 0x95, 0x3f, 0x1f, 0x4a, 0xde, 0x47, 0xc9, 0x16, 0x67, 0x1e, 0xa4, 0x21, 0x57, 0x3a, 0x5d,
	0x0d, 0x5d, 0x38, 0x40, 0x17, 0x0a, 0x2c, 0xfd, 0x94, 0x1c, 0x9e, 0x4b, 0x7f, 0x2a, 0xde, 0xc2,
	0xf9, 0xbd, 0x06, 0xe9, 0xf2, 0x85, 0xb2, 0x5b, 0x38, 0xdf, 0x0e, 0xef, 0x04, 0xa4, 0x65, 0x22,
	0x83, 0xad, 0xbd, 0xc4, 0x1f, 0x37, 0x13, 0x15, 0x4f, 0x73, 0xa9, 0x31, 0x2a, 0x15, 0x96, 0x02,
	0xc3, 0x0e, 0xc5, 0x4c, 0xe8, 0x2c, 0x28, 0x29, 0xa0, 0x1f, 0x93, 0xfd, 0x74, 0x94, 0xca, 0x2e,
	0x51, 0xb3, 0x9b, 0xe2, 0xd1, 0x62, 0x0e, 0x6c, 0x55, 0x73, 0x96, 0x16, 0x21, 0xb8, 0x84, 0xa7,
	0xb9, 0x56, 0xff, 0x38, 0x8c, 0x1d, 0xd2, 0x3a, 0xf7, 0xb5, 0xd9, 0x77, 0x10, 0x48, 0x50, 0x0a,
	0x56, 0x4f, 0x5a, 0x91, 0x36, 0xa1, 0xeb, 0x73, 0xed, 0x4f, 0x3d, 0xf1, 0x63, 0x9a, 0xca, 0x2a,
	0xdb, 0x10, 0xa6, 0x0d, 0xc6, 0xaa, 0xbb, 0x79, 0x60, 0x7c, 0xc7, 0x50, 0x56, 0x58, 0x9e, 0x32,
	0x11, 0x4a, 0xe5, 0x68, 0x40, 0x0d, 0x05, 0x39, 0xc6, 0x3c, 0x67, 0x88, 0x2e, 0xa2, 0x20, 0x8b,
	0xe0, 0x1a, 0xf7, 0x07, 0xbf, 0x2e, 0xdb, 0xd6, 0x6f, 0xcb, 0xb6, 0xf5, 0xe7, 0xb2, 0x6d, 0xfd,
	0xfc, 0x57, 0xfb, 0xbd, 0xef, 0x4f, 0x27, 0x42, 0x4f, 0x93, 0x71, 0xd7, 0x8f, 0x67, 0xbd, 0x50,
	0x44, 0x0f, 0x5c, 0x7c, 0x21, 0xe2, 0x1e, 0x9f, 0xf5, 0xf0, 0xbf, 0x83, 0xaf, 0x40, 0xbe, 0x15,
	0x3e, 0xa8, 0xde, 0xe6, 0x0f, 0xc6, 0xb8, 0x86, 0xdf, 0x2f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0xea, 0xf9, 0xc5, 0xf8, 0x8d, 0x08, 0x00, 0x00,
}
