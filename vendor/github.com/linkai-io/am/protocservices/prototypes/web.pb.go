// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: prototypes/web.proto

package prototypes // import "github.com/linkai-io/am/protocservices/prototypes"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ScanGroupWebDataStats struct {
	OrgID                int32            `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32            `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	ExpiringCerts15Days  int32            `protobuf:"varint,3,opt,name=ExpiringCerts15Days,proto3" json:"ExpiringCerts15Days,omitempty"`
	ExpiringCerts30Days  int32            `protobuf:"varint,4,opt,name=ExpiringCerts30Days,proto3" json:"ExpiringCerts30Days,omitempty"`
	UniqueWebServers     int32            `protobuf:"varint,5,opt,name=UniqueWebServers,proto3" json:"UniqueWebServers,omitempty"`
	ServerTypes          map[string]int32 `protobuf:"bytes,6,rep,name=ServerTypes" json:"ServerTypes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ScanGroupWebDataStats) Reset()         { *m = ScanGroupWebDataStats{} }
func (m *ScanGroupWebDataStats) String() string { return proto.CompactTextString(m) }
func (*ScanGroupWebDataStats) ProtoMessage()    {}
func (*ScanGroupWebDataStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_e54209c67fb0e08f, []int{0}
}
func (m *ScanGroupWebDataStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScanGroupWebDataStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScanGroupWebDataStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ScanGroupWebDataStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanGroupWebDataStats.Merge(dst, src)
}
func (m *ScanGroupWebDataStats) XXX_Size() int {
	return m.Size()
}
func (m *ScanGroupWebDataStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanGroupWebDataStats.DiscardUnknown(m)
}

var xxx_messageInfo_ScanGroupWebDataStats proto.InternalMessageInfo

func (m *ScanGroupWebDataStats) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *ScanGroupWebDataStats) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *ScanGroupWebDataStats) GetExpiringCerts15Days() int32 {
	if m != nil {
		return m.ExpiringCerts15Days
	}
	return 0
}

func (m *ScanGroupWebDataStats) GetExpiringCerts30Days() int32 {
	if m != nil {
		return m.ExpiringCerts30Days
	}
	return 0
}

func (m *ScanGroupWebDataStats) GetUniqueWebServers() int32 {
	if m != nil {
		return m.UniqueWebServers
	}
	return 0
}

func (m *ScanGroupWebDataStats) GetServerTypes() map[string]int32 {
	if m != nil {
		return m.ServerTypes
	}
	return nil
}

type URLData struct {
	ResponseID           int64    `protobuf:"varint,1,opt,name=ResponseID,proto3" json:"ResponseID,omitempty"`
	URL                  string   `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	RawBodyLink          string   `protobuf:"bytes,3,opt,name=RawBodyLink,proto3" json:"RawBodyLink,omitempty"`
	MimeType             string   `protobuf:"bytes,4,opt,name=MimeType,proto3" json:"MimeType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *URLData) Reset()         { *m = URLData{} }
func (m *URLData) String() string { return proto.CompactTextString(m) }
func (*URLData) ProtoMessage()    {}
func (*URLData) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_e54209c67fb0e08f, []int{1}
}
func (m *URLData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *URLData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_URLData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *URLData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLData.Merge(dst, src)
}
func (m *URLData) XXX_Size() int {
	return m.Size()
}
func (m *URLData) XXX_DiscardUnknown() {
	xxx_messageInfo_URLData.DiscardUnknown(m)
}

var xxx_messageInfo_URLData proto.InternalMessageInfo

func (m *URLData) GetResponseID() int64 {
	if m != nil {
		return m.ResponseID
	}
	return 0
}

func (m *URLData) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *URLData) GetRawBodyLink() string {
	if m != nil {
		return m.RawBodyLink
	}
	return ""
}

func (m *URLData) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

type URLListResponse struct {
	OrgID                int32      `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32      `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	HostAddress          string     `protobuf:"bytes,3,opt,name=HostAddress,proto3" json:"HostAddress,omitempty"`
	IPAddress            string     `protobuf:"bytes,4,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	URLRequestTimestamp  int64      `protobuf:"varint,5,opt,name=URLRequestTimestamp,proto3" json:"URLRequestTimestamp,omitempty"`
	URLs                 []*URLData `protobuf:"bytes,6,rep,name=URLs" json:"URLs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *URLListResponse) Reset()         { *m = URLListResponse{} }
func (m *URLListResponse) String() string { return proto.CompactTextString(m) }
func (*URLListResponse) ProtoMessage()    {}
func (*URLListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_e54209c67fb0e08f, []int{2}
}
func (m *URLListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *URLListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_URLListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *URLListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_URLListResponse.Merge(dst, src)
}
func (m *URLListResponse) XXX_Size() int {
	return m.Size()
}
func (m *URLListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_URLListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_URLListResponse proto.InternalMessageInfo

func (m *URLListResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *URLListResponse) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *URLListResponse) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *URLListResponse) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *URLListResponse) GetURLRequestTimestamp() int64 {
	if m != nil {
		return m.URLRequestTimestamp
	}
	return 0
}

func (m *URLListResponse) GetURLs() []*URLData {
	if m != nil {
		return m.URLs
	}
	return nil
}

type WebData struct {
	Address              *AddressData    `protobuf:"bytes,1,opt,name=Address" json:"Address,omitempty"`
	Responses            []*HTTPResponse `protobuf:"bytes,2,rep,name=Responses" json:"Responses,omitempty"`
	SnapshotLink         string          `protobuf:"bytes,3,opt,name=SnapshotLink,proto3" json:"SnapshotLink,omitempty"`
	SerializedDOMHash    string          `protobuf:"bytes,4,opt,name=SerializedDOMHash,proto3" json:"SerializedDOMHash,omitempty"`
	SerializedDOMLink    string          `protobuf:"bytes,5,opt,name=SerializedDOMLink,proto3" json:"SerializedDOMLink,omitempty"`
	ResponseTimestamp    int64           `protobuf:"varint,6,opt,name=ResponseTimestamp,proto3" json:"ResponseTimestamp,omitempty"`
	URLRequestTimestamp  int64           `protobuf:"varint,7,opt,name=URLRequestTimestamp,proto3" json:"URLRequestTimestamp,omitempty"`
	URL                  string          `protobuf:"bytes,8,opt,name=URL,proto3" json:"URL,omitempty"`
	AddressHash          string          `protobuf:"bytes,9,opt,name=AddressHash,proto3" json:"AddressHash,omitempty"`
	HostAddress          string          `protobuf:"bytes,10,opt,name=HostAddress,proto3" json:"HostAddress,omitempty"`
	IPAddress            string          `protobuf:"bytes,11,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	Scheme               string          `protobuf:"bytes,12,opt,name=Scheme,proto3" json:"Scheme,omitempty"`
	ResponsePort         int32           `protobuf:"varint,13,opt,name=ResponsePort,proto3" json:"ResponsePort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WebData) Reset()         { *m = WebData{} }
func (m *WebData) String() string { return proto.CompactTextString(m) }
func (*WebData) ProtoMessage()    {}
func (*WebData) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_e54209c67fb0e08f, []int{3}
}
func (m *WebData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WebData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebData.Merge(dst, src)
}
func (m *WebData) XXX_Size() int {
	return m.Size()
}
func (m *WebData) XXX_DiscardUnknown() {
	xxx_messageInfo_WebData.DiscardUnknown(m)
}

var xxx_messageInfo_WebData proto.InternalMessageInfo

func (m *WebData) GetAddress() *AddressData {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *WebData) GetResponses() []*HTTPResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *WebData) GetSnapshotLink() string {
	if m != nil {
		return m.SnapshotLink
	}
	return ""
}

func (m *WebData) GetSerializedDOMHash() string {
	if m != nil {
		return m.SerializedDOMHash
	}
	return ""
}

func (m *WebData) GetSerializedDOMLink() string {
	if m != nil {
		return m.SerializedDOMLink
	}
	return ""
}

func (m *WebData) GetResponseTimestamp() int64 {
	if m != nil {
		return m.ResponseTimestamp
	}
	return 0
}

func (m *WebData) GetURLRequestTimestamp() int64 {
	if m != nil {
		return m.URLRequestTimestamp
	}
	return 0
}

func (m *WebData) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *WebData) GetAddressHash() string {
	if m != nil {
		return m.AddressHash
	}
	return ""
}

func (m *WebData) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *WebData) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *WebData) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *WebData) GetResponsePort() int32 {
	if m != nil {
		return m.ResponsePort
	}
	return 0
}

type WebCertificate struct {
	OrgID                             int32    `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID                           int32    `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	CertificateID                     int64    `protobuf:"varint,3,opt,name=CertificateID,proto3" json:"CertificateID,omitempty"`
	ResponseTimestamp                 int64    `protobuf:"varint,4,opt,name=ResponseTimestamp,proto3" json:"ResponseTimestamp,omitempty"`
	HostAddress                       string   `protobuf:"bytes,5,opt,name=HostAddress,proto3" json:"HostAddress,omitempty"`
	Port                              string   `protobuf:"bytes,6,opt,name=Port,proto3" json:"Port,omitempty"`
	Protocol                          string   `protobuf:"bytes,7,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	KeyExchange                       string   `protobuf:"bytes,8,opt,name=KeyExchange,proto3" json:"KeyExchange,omitempty"`
	KeyExchangeGroup                  string   `protobuf:"bytes,9,opt,name=KeyExchangeGroup,proto3" json:"KeyExchangeGroup,omitempty"`
	Cipher                            string   `protobuf:"bytes,10,opt,name=Cipher,proto3" json:"Cipher,omitempty"`
	Mac                               string   `protobuf:"bytes,11,opt,name=Mac,proto3" json:"Mac,omitempty"`
	CertificateValue                  int32    `protobuf:"varint,12,opt,name=CertificateValue,proto3" json:"CertificateValue,omitempty"`
	SubjectName                       string   `protobuf:"bytes,13,opt,name=SubjectName,proto3" json:"SubjectName,omitempty"`
	SanList                           []string `protobuf:"bytes,14,rep,name=SanList" json:"SanList,omitempty"`
	Issuer                            string   `protobuf:"bytes,15,opt,name=Issuer,proto3" json:"Issuer,omitempty"`
	ValidFrom                         int64    `protobuf:"varint,16,opt,name=ValidFrom,proto3" json:"ValidFrom,omitempty"`
	ValidTo                           int64    `protobuf:"varint,17,opt,name=ValidTo,proto3" json:"ValidTo,omitempty"`
	CertificateTransparencyCompliance string   `protobuf:"bytes,18,opt,name=CertificateTransparencyCompliance,proto3" json:"CertificateTransparencyCompliance,omitempty"`
	IsDeleted                         bool     `protobuf:"varint,19,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"`
	AddressHash                       string   `protobuf:"bytes,20,opt,name=AddressHash,proto3" json:"AddressHash,omitempty"`
	IPAddress                         string   `protobuf:"bytes,21,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	XXX_NoUnkeyedLiteral              struct{} `json:"-"`
	XXX_unrecognized                  []byte   `json:"-"`
	XXX_sizecache                     int32    `json:"-"`
}

func (m *WebCertificate) Reset()         { *m = WebCertificate{} }
func (m *WebCertificate) String() string { return proto.CompactTextString(m) }
func (*WebCertificate) ProtoMessage()    {}
func (*WebCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_e54209c67fb0e08f, []int{4}
}
func (m *WebCertificate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebCertificate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WebCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebCertificate.Merge(dst, src)
}
func (m *WebCertificate) XXX_Size() int {
	return m.Size()
}
func (m *WebCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_WebCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_WebCertificate proto.InternalMessageInfo

func (m *WebCertificate) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *WebCertificate) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *WebCertificate) GetCertificateID() int64 {
	if m != nil {
		return m.CertificateID
	}
	return 0
}

func (m *WebCertificate) GetResponseTimestamp() int64 {
	if m != nil {
		return m.ResponseTimestamp
	}
	return 0
}

func (m *WebCertificate) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *WebCertificate) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *WebCertificate) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *WebCertificate) GetKeyExchange() string {
	if m != nil {
		return m.KeyExchange
	}
	return ""
}

func (m *WebCertificate) GetKeyExchangeGroup() string {
	if m != nil {
		return m.KeyExchangeGroup
	}
	return ""
}

func (m *WebCertificate) GetCipher() string {
	if m != nil {
		return m.Cipher
	}
	return ""
}

func (m *WebCertificate) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *WebCertificate) GetCertificateValue() int32 {
	if m != nil {
		return m.CertificateValue
	}
	return 0
}

func (m *WebCertificate) GetSubjectName() string {
	if m != nil {
		return m.SubjectName
	}
	return ""
}

func (m *WebCertificate) GetSanList() []string {
	if m != nil {
		return m.SanList
	}
	return nil
}

func (m *WebCertificate) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *WebCertificate) GetValidFrom() int64 {
	if m != nil {
		return m.ValidFrom
	}
	return 0
}

func (m *WebCertificate) GetValidTo() int64 {
	if m != nil {
		return m.ValidTo
	}
	return 0
}

func (m *WebCertificate) GetCertificateTransparencyCompliance() string {
	if m != nil {
		return m.CertificateTransparencyCompliance
	}
	return ""
}

func (m *WebCertificate) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *WebCertificate) GetAddressHash() string {
	if m != nil {
		return m.AddressHash
	}
	return ""
}

func (m *WebCertificate) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

type HTTPResponse struct {
	ResponseID           int64             `protobuf:"varint,1,opt,name=ResponseID,proto3" json:"ResponseID,omitempty"`
	OrgID                int32             `protobuf:"varint,2,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32             `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Scheme               string            `protobuf:"bytes,4,opt,name=Scheme,proto3" json:"Scheme,omitempty"`
	HostAddress          string            `protobuf:"bytes,5,opt,name=HostAddress,proto3" json:"HostAddress,omitempty"`
	IPAddress            string            `protobuf:"bytes,6,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	AddressHash          string            `protobuf:"bytes,7,opt,name=AddressHash,proto3" json:"AddressHash,omitempty"`
	ResponsePort         string            `protobuf:"bytes,8,opt,name=ResponsePort,proto3" json:"ResponsePort,omitempty"`
	RequestedPort        string            `protobuf:"bytes,9,opt,name=RequestedPort,proto3" json:"RequestedPort,omitempty"`
	Status               int32             `protobuf:"varint,10,opt,name=Status,proto3" json:"Status,omitempty"`
	StatusText           string            `protobuf:"bytes,11,opt,name=StatusText,proto3" json:"StatusText,omitempty"`
	URL                  string            `protobuf:"bytes,12,opt,name=URL,proto3" json:"URL,omitempty"`
	Headers              map[string]string `protobuf:"bytes,13,rep,name=Headers" json:"Headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MimeType             string            `protobuf:"bytes,14,opt,name=MimeType,proto3" json:"MimeType,omitempty"`
	RawBodyLink          string            `protobuf:"bytes,15,opt,name=RawBodyLink,proto3" json:"RawBodyLink,omitempty"`
	RawBodyHash          string            `protobuf:"bytes,16,opt,name=RawBodyHash,proto3" json:"RawBodyHash,omitempty"`
	ResponseTimestamp    int64             `protobuf:"varint,17,opt,name=ResponseTimestamp,proto3" json:"ResponseTimestamp,omitempty"`
	IsDocument           bool              `protobuf:"varint,18,opt,name=IsDocument,proto3" json:"IsDocument,omitempty"`
	WebCertificate       *WebCertificate   `protobuf:"bytes,19,opt,name=WebCertificate" json:"WebCertificate,omitempty"`
	IsDeleted            bool              `protobuf:"varint,20,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"`
	URLRequestTimestamp  int64             `protobuf:"varint,21,opt,name=URLRequestTimestamp,proto3" json:"URLRequestTimestamp,omitempty"`
	LoadHostAddress      string            `protobuf:"bytes,22,opt,name=LoadHostAddress,proto3" json:"LoadHostAddress,omitempty"`
	LoadIPAddress        string            `protobuf:"bytes,23,opt,name=LoadIPAddress,proto3" json:"LoadIPAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HTTPResponse) Reset()         { *m = HTTPResponse{} }
func (m *HTTPResponse) String() string { return proto.CompactTextString(m) }
func (*HTTPResponse) ProtoMessage()    {}
func (*HTTPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_e54209c67fb0e08f, []int{5}
}
func (m *HTTPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HTTPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HTTPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPResponse.Merge(dst, src)
}
func (m *HTTPResponse) XXX_Size() int {
	return m.Size()
}
func (m *HTTPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPResponse proto.InternalMessageInfo

func (m *HTTPResponse) GetResponseID() int64 {
	if m != nil {
		return m.ResponseID
	}
	return 0
}

func (m *HTTPResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *HTTPResponse) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *HTTPResponse) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *HTTPResponse) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *HTTPResponse) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *HTTPResponse) GetAddressHash() string {
	if m != nil {
		return m.AddressHash
	}
	return ""
}

func (m *HTTPResponse) GetResponsePort() string {
	if m != nil {
		return m.ResponsePort
	}
	return ""
}

func (m *HTTPResponse) GetRequestedPort() string {
	if m != nil {
		return m.RequestedPort
	}
	return ""
}

func (m *HTTPResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *HTTPResponse) GetStatusText() string {
	if m != nil {
		return m.StatusText
	}
	return ""
}

func (m *HTTPResponse) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *HTTPResponse) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPResponse) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *HTTPResponse) GetRawBodyLink() string {
	if m != nil {
		return m.RawBodyLink
	}
	return ""
}

func (m *HTTPResponse) GetRawBodyHash() string {
	if m != nil {
		return m.RawBodyHash
	}
	return ""
}

func (m *HTTPResponse) GetResponseTimestamp() int64 {
	if m != nil {
		return m.ResponseTimestamp
	}
	return 0
}

func (m *HTTPResponse) GetIsDocument() bool {
	if m != nil {
		return m.IsDocument
	}
	return false
}

func (m *HTTPResponse) GetWebCertificate() *WebCertificate {
	if m != nil {
		return m.WebCertificate
	}
	return nil
}

func (m *HTTPResponse) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *HTTPResponse) GetURLRequestTimestamp() int64 {
	if m != nil {
		return m.URLRequestTimestamp
	}
	return 0
}

func (m *HTTPResponse) GetLoadHostAddress() string {
	if m != nil {
		return m.LoadHostAddress
	}
	return ""
}

func (m *HTTPResponse) GetLoadIPAddress() string {
	if m != nil {
		return m.LoadIPAddress
	}
	return ""
}

type WebSnapshot struct {
	OrgID                int32    `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32    `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	SnapshotID           int64    `protobuf:"varint,3,opt,name=SnapshotID,proto3" json:"SnapshotID,omitempty"`
	SnapshotLink         string   `protobuf:"bytes,4,opt,name=SnapshotLink,proto3" json:"SnapshotLink,omitempty"`
	SerializedDOMLink    string   `protobuf:"bytes,5,opt,name=SerializedDOMLink,proto3" json:"SerializedDOMLink,omitempty"`
	ResponseTimestamp    int64    `protobuf:"varint,6,opt,name=ResponseTimestamp,proto3" json:"ResponseTimestamp,omitempty"`
	IsDeleted            bool     `protobuf:"varint,7,opt,name=IsDeleted,proto3" json:"IsDeleted,omitempty"`
	SerializedDOMHash    string   `protobuf:"bytes,8,opt,name=SerializedDOMHash,proto3" json:"SerializedDOMHash,omitempty"`
	URL                  string   `protobuf:"bytes,9,opt,name=URL,proto3" json:"URL,omitempty"`
	AddressHash          string   `protobuf:"bytes,10,opt,name=AddressHash,proto3" json:"AddressHash,omitempty"`
	HostAddress          string   `protobuf:"bytes,11,opt,name=HostAddress,proto3" json:"HostAddress,omitempty"`
	IPAddress            string   `protobuf:"bytes,12,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	ResponsePort         int32    `protobuf:"varint,13,opt,name=ResponsePort,proto3" json:"ResponsePort,omitempty"`
	Scheme               string   `protobuf:"bytes,14,opt,name=Scheme,proto3" json:"Scheme,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WebSnapshot) Reset()         { *m = WebSnapshot{} }
func (m *WebSnapshot) String() string { return proto.CompactTextString(m) }
func (*WebSnapshot) ProtoMessage()    {}
func (*WebSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_e54209c67fb0e08f, []int{6}
}
func (m *WebSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WebSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebSnapshot.Merge(dst, src)
}
func (m *WebSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *WebSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_WebSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_WebSnapshot proto.InternalMessageInfo

func (m *WebSnapshot) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *WebSnapshot) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *WebSnapshot) GetSnapshotID() int64 {
	if m != nil {
		return m.SnapshotID
	}
	return 0
}

func (m *WebSnapshot) GetSnapshotLink() string {
	if m != nil {
		return m.SnapshotLink
	}
	return ""
}

func (m *WebSnapshot) GetSerializedDOMLink() string {
	if m != nil {
		return m.SerializedDOMLink
	}
	return ""
}

func (m *WebSnapshot) GetResponseTimestamp() int64 {
	if m != nil {
		return m.ResponseTimestamp
	}
	return 0
}

func (m *WebSnapshot) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *WebSnapshot) GetSerializedDOMHash() string {
	if m != nil {
		return m.SerializedDOMHash
	}
	return ""
}

func (m *WebSnapshot) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *WebSnapshot) GetAddressHash() string {
	if m != nil {
		return m.AddressHash
	}
	return ""
}

func (m *WebSnapshot) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *WebSnapshot) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *WebSnapshot) GetResponsePort() int32 {
	if m != nil {
		return m.ResponsePort
	}
	return 0
}

func (m *WebSnapshot) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

type WebResponseFilter struct {
	OrgID                int32       `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32       `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Start                int64       `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	Limit                int32       `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Filters              *FilterType `protobuf:"bytes,5,opt,name=Filters" json:"Filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WebResponseFilter) Reset()         { *m = WebResponseFilter{} }
func (m *WebResponseFilter) String() string { return proto.CompactTextString(m) }
func (*WebResponseFilter) ProtoMessage()    {}
func (*WebResponseFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_e54209c67fb0e08f, []int{7}
}
func (m *WebResponseFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebResponseFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebResponseFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WebResponseFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebResponseFilter.Merge(dst, src)
}
func (m *WebResponseFilter) XXX_Size() int {
	return m.Size()
}
func (m *WebResponseFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_WebResponseFilter.DiscardUnknown(m)
}

var xxx_messageInfo_WebResponseFilter proto.InternalMessageInfo

func (m *WebResponseFilter) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *WebResponseFilter) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *WebResponseFilter) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *WebResponseFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *WebResponseFilter) GetFilters() *FilterType {
	if m != nil {
		return m.Filters
	}
	return nil
}

type WebCertificateFilter struct {
	OrgID                int32       `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32       `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Start                int64       `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	Limit                int32       `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Filters              *FilterType `protobuf:"bytes,5,opt,name=Filters" json:"Filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WebCertificateFilter) Reset()         { *m = WebCertificateFilter{} }
func (m *WebCertificateFilter) String() string { return proto.CompactTextString(m) }
func (*WebCertificateFilter) ProtoMessage()    {}
func (*WebCertificateFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_e54209c67fb0e08f, []int{8}
}
func (m *WebCertificateFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebCertificateFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebCertificateFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WebCertificateFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebCertificateFilter.Merge(dst, src)
}
func (m *WebCertificateFilter) XXX_Size() int {
	return m.Size()
}
func (m *WebCertificateFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_WebCertificateFilter.DiscardUnknown(m)
}

var xxx_messageInfo_WebCertificateFilter proto.InternalMessageInfo

func (m *WebCertificateFilter) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *WebCertificateFilter) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *WebCertificateFilter) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *WebCertificateFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *WebCertificateFilter) GetFilters() *FilterType {
	if m != nil {
		return m.Filters
	}
	return nil
}

type WebSnapshotFilter struct {
	OrgID                int32       `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32       `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Start                int64       `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	Limit                int32       `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Filters              *FilterType `protobuf:"bytes,5,opt,name=Filters" json:"Filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WebSnapshotFilter) Reset()         { *m = WebSnapshotFilter{} }
func (m *WebSnapshotFilter) String() string { return proto.CompactTextString(m) }
func (*WebSnapshotFilter) ProtoMessage()    {}
func (*WebSnapshotFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_web_e54209c67fb0e08f, []int{9}
}
func (m *WebSnapshotFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebSnapshotFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebSnapshotFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WebSnapshotFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebSnapshotFilter.Merge(dst, src)
}
func (m *WebSnapshotFilter) XXX_Size() int {
	return m.Size()
}
func (m *WebSnapshotFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_WebSnapshotFilter.DiscardUnknown(m)
}

var xxx_messageInfo_WebSnapshotFilter proto.InternalMessageInfo

func (m *WebSnapshotFilter) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *WebSnapshotFilter) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *WebSnapshotFilter) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *WebSnapshotFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *WebSnapshotFilter) GetFilters() *FilterType {
	if m != nil {
		return m.Filters
	}
	return nil
}

func init() {
	proto.RegisterType((*ScanGroupWebDataStats)(nil), "ScanGroupWebDataStats")
	proto.RegisterMapType((map[string]int32)(nil), "ScanGroupWebDataStats.ServerTypesEntry")
	proto.RegisterType((*URLData)(nil), "URLData")
	proto.RegisterType((*URLListResponse)(nil), "URLListResponse")
	proto.RegisterType((*WebData)(nil), "WebData")
	proto.RegisterType((*WebCertificate)(nil), "WebCertificate")
	proto.RegisterType((*HTTPResponse)(nil), "HTTPResponse")
	proto.RegisterMapType((map[string]string)(nil), "HTTPResponse.HeadersEntry")
	proto.RegisterType((*WebSnapshot)(nil), "WebSnapshot")
	proto.RegisterType((*WebResponseFilter)(nil), "WebResponseFilter")
	proto.RegisterType((*WebCertificateFilter)(nil), "WebCertificateFilter")
	proto.RegisterType((*WebSnapshotFilter)(nil), "WebSnapshotFilter")
}
func (m *ScanGroupWebDataStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScanGroupWebDataStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.GroupID))
	}
	if m.ExpiringCerts15Days != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.ExpiringCerts15Days))
	}
	if m.ExpiringCerts30Days != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.ExpiringCerts30Days))
	}
	if m.UniqueWebServers != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.UniqueWebServers))
	}
	if len(m.ServerTypes) > 0 {
		for k, _ := range m.ServerTypes {
			dAtA[i] = 0x32
			i++
			v := m.ServerTypes[k]
			mapSize := 1 + len(k) + sovWeb(uint64(len(k))) + 1 + sovWeb(uint64(v))
			i = encodeVarintWeb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintWeb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintWeb(dAtA, i, uint64(v))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *URLData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResponseID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.ResponseID))
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.RawBodyLink) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.RawBodyLink)))
		i += copy(dAtA[i:], m.RawBodyLink)
	}
	if len(m.MimeType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.MimeType)))
		i += copy(dAtA[i:], m.MimeType)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *URLListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *URLListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.GroupID))
	}
	if len(m.HostAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.HostAddress)))
		i += copy(dAtA[i:], m.HostAddress)
	}
	if len(m.IPAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.IPAddress)))
		i += copy(dAtA[i:], m.IPAddress)
	}
	if m.URLRequestTimestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.URLRequestTimestamp))
	}
	if len(m.URLs) > 0 {
		for _, msg := range m.URLs {
			dAtA[i] = 0x32
			i++
			i = encodeVarintWeb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WebData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Address != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Address.Size()))
		n1, err := m.Address.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWeb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SnapshotLink) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.SnapshotLink)))
		i += copy(dAtA[i:], m.SnapshotLink)
	}
	if len(m.SerializedDOMHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.SerializedDOMHash)))
		i += copy(dAtA[i:], m.SerializedDOMHash)
	}
	if len(m.SerializedDOMLink) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.SerializedDOMLink)))
		i += copy(dAtA[i:], m.SerializedDOMLink)
	}
	if m.ResponseTimestamp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.ResponseTimestamp))
	}
	if m.URLRequestTimestamp != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.URLRequestTimestamp))
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.AddressHash) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.AddressHash)))
		i += copy(dAtA[i:], m.AddressHash)
	}
	if len(m.HostAddress) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.HostAddress)))
		i += copy(dAtA[i:], m.HostAddress)
	}
	if len(m.IPAddress) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.IPAddress)))
		i += copy(dAtA[i:], m.IPAddress)
	}
	if len(m.Scheme) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Scheme)))
		i += copy(dAtA[i:], m.Scheme)
	}
	if m.ResponsePort != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.ResponsePort))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WebCertificate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebCertificate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.GroupID))
	}
	if m.CertificateID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.CertificateID))
	}
	if m.ResponseTimestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.ResponseTimestamp))
	}
	if len(m.HostAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.HostAddress)))
		i += copy(dAtA[i:], m.HostAddress)
	}
	if len(m.Port) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Port)))
		i += copy(dAtA[i:], m.Port)
	}
	if len(m.Protocol) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Protocol)))
		i += copy(dAtA[i:], m.Protocol)
	}
	if len(m.KeyExchange) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.KeyExchange)))
		i += copy(dAtA[i:], m.KeyExchange)
	}
	if len(m.KeyExchangeGroup) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.KeyExchangeGroup)))
		i += copy(dAtA[i:], m.KeyExchangeGroup)
	}
	if len(m.Cipher) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Cipher)))
		i += copy(dAtA[i:], m.Cipher)
	}
	if len(m.Mac) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Mac)))
		i += copy(dAtA[i:], m.Mac)
	}
	if m.CertificateValue != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.CertificateValue))
	}
	if len(m.SubjectName) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.SubjectName)))
		i += copy(dAtA[i:], m.SubjectName)
	}
	if len(m.SanList) > 0 {
		for _, s := range m.SanList {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Issuer) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Issuer)))
		i += copy(dAtA[i:], m.Issuer)
	}
	if m.ValidFrom != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.ValidFrom))
	}
	if m.ValidTo != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.ValidTo))
	}
	if len(m.CertificateTransparencyCompliance) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.CertificateTransparencyCompliance)))
		i += copy(dAtA[i:], m.CertificateTransparencyCompliance)
	}
	if m.IsDeleted {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AddressHash) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.AddressHash)))
		i += copy(dAtA[i:], m.AddressHash)
	}
	if len(m.IPAddress) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.IPAddress)))
		i += copy(dAtA[i:], m.IPAddress)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HTTPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResponseID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.ResponseID))
	}
	if m.OrgID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.GroupID))
	}
	if len(m.Scheme) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Scheme)))
		i += copy(dAtA[i:], m.Scheme)
	}
	if len(m.HostAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.HostAddress)))
		i += copy(dAtA[i:], m.HostAddress)
	}
	if len(m.IPAddress) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.IPAddress)))
		i += copy(dAtA[i:], m.IPAddress)
	}
	if len(m.AddressHash) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.AddressHash)))
		i += copy(dAtA[i:], m.AddressHash)
	}
	if len(m.ResponsePort) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.ResponsePort)))
		i += copy(dAtA[i:], m.ResponsePort)
	}
	if len(m.RequestedPort) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.RequestedPort)))
		i += copy(dAtA[i:], m.RequestedPort)
	}
	if m.Status != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Status))
	}
	if len(m.StatusText) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.StatusText)))
		i += copy(dAtA[i:], m.StatusText)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.Headers) > 0 {
		for k, _ := range m.Headers {
			dAtA[i] = 0x6a
			i++
			v := m.Headers[k]
			mapSize := 1 + len(k) + sovWeb(uint64(len(k))) + 1 + len(v) + sovWeb(uint64(len(v)))
			i = encodeVarintWeb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintWeb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintWeb(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.MimeType) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.MimeType)))
		i += copy(dAtA[i:], m.MimeType)
	}
	if len(m.RawBodyLink) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.RawBodyLink)))
		i += copy(dAtA[i:], m.RawBodyLink)
	}
	if len(m.RawBodyHash) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.RawBodyHash)))
		i += copy(dAtA[i:], m.RawBodyHash)
	}
	if m.ResponseTimestamp != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.ResponseTimestamp))
	}
	if m.IsDocument {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.IsDocument {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WebCertificate != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.WebCertificate.Size()))
		n2, err := m.WebCertificate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.IsDeleted {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.URLRequestTimestamp != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.URLRequestTimestamp))
	}
	if len(m.LoadHostAddress) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.LoadHostAddress)))
		i += copy(dAtA[i:], m.LoadHostAddress)
	}
	if len(m.LoadIPAddress) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.LoadIPAddress)))
		i += copy(dAtA[i:], m.LoadIPAddress)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WebSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebSnapshot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.GroupID))
	}
	if m.SnapshotID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.SnapshotID))
	}
	if len(m.SnapshotLink) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.SnapshotLink)))
		i += copy(dAtA[i:], m.SnapshotLink)
	}
	if len(m.SerializedDOMLink) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.SerializedDOMLink)))
		i += copy(dAtA[i:], m.SerializedDOMLink)
	}
	if m.ResponseTimestamp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.ResponseTimestamp))
	}
	if m.IsDeleted {
		dAtA[i] = 0x38
		i++
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.SerializedDOMHash) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.SerializedDOMHash)))
		i += copy(dAtA[i:], m.SerializedDOMHash)
	}
	if len(m.URL) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.URL)))
		i += copy(dAtA[i:], m.URL)
	}
	if len(m.AddressHash) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.AddressHash)))
		i += copy(dAtA[i:], m.AddressHash)
	}
	if len(m.HostAddress) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.HostAddress)))
		i += copy(dAtA[i:], m.HostAddress)
	}
	if len(m.IPAddress) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.IPAddress)))
		i += copy(dAtA[i:], m.IPAddress)
	}
	if m.ResponsePort != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.ResponsePort))
	}
	if len(m.Scheme) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintWeb(dAtA, i, uint64(len(m.Scheme)))
		i += copy(dAtA[i:], m.Scheme)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WebResponseFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebResponseFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.GroupID))
	}
	if m.Start != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Start))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Limit))
	}
	if m.Filters != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Filters.Size()))
		n3, err := m.Filters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WebCertificateFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebCertificateFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.GroupID))
	}
	if m.Start != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Start))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Limit))
	}
	if m.Filters != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Filters.Size()))
		n4, err := m.Filters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WebSnapshotFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebSnapshotFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.GroupID))
	}
	if m.Start != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Start))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Limit))
	}
	if m.Filters != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWeb(dAtA, i, uint64(m.Filters.Size()))
		n5, err := m.Filters.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintWeb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ScanGroupWebDataStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovWeb(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovWeb(uint64(m.GroupID))
	}
	if m.ExpiringCerts15Days != 0 {
		n += 1 + sovWeb(uint64(m.ExpiringCerts15Days))
	}
	if m.ExpiringCerts30Days != 0 {
		n += 1 + sovWeb(uint64(m.ExpiringCerts30Days))
	}
	if m.UniqueWebServers != 0 {
		n += 1 + sovWeb(uint64(m.UniqueWebServers))
	}
	if len(m.ServerTypes) > 0 {
		for k, v := range m.ServerTypes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWeb(uint64(len(k))) + 1 + sovWeb(uint64(v))
			n += mapEntrySize + 1 + sovWeb(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *URLData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponseID != 0 {
		n += 1 + sovWeb(uint64(m.ResponseID))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.RawBodyLink)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *URLListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovWeb(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovWeb(uint64(m.GroupID))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.URLRequestTimestamp != 0 {
		n += 1 + sovWeb(uint64(m.URLRequestTimestamp))
	}
	if len(m.URLs) > 0 {
		for _, e := range m.URLs {
			l = e.Size()
			n += 1 + l + sovWeb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovWeb(uint64(l))
		}
	}
	l = len(m.SnapshotLink)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.SerializedDOMHash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.SerializedDOMLink)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.ResponseTimestamp != 0 {
		n += 1 + sovWeb(uint64(m.ResponseTimestamp))
	}
	if m.URLRequestTimestamp != 0 {
		n += 1 + sovWeb(uint64(m.URLRequestTimestamp))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.AddressHash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.Scheme)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.ResponsePort != 0 {
		n += 1 + sovWeb(uint64(m.ResponsePort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebCertificate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovWeb(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovWeb(uint64(m.GroupID))
	}
	if m.CertificateID != 0 {
		n += 1 + sovWeb(uint64(m.CertificateID))
	}
	if m.ResponseTimestamp != 0 {
		n += 1 + sovWeb(uint64(m.ResponseTimestamp))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.KeyExchange)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.KeyExchangeGroup)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.Cipher)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.Mac)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.CertificateValue != 0 {
		n += 1 + sovWeb(uint64(m.CertificateValue))
	}
	l = len(m.SubjectName)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if len(m.SanList) > 0 {
		for _, s := range m.SanList {
			l = len(s)
			n += 1 + l + sovWeb(uint64(l))
		}
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.ValidFrom != 0 {
		n += 2 + sovWeb(uint64(m.ValidFrom))
	}
	if m.ValidTo != 0 {
		n += 2 + sovWeb(uint64(m.ValidTo))
	}
	l = len(m.CertificateTransparencyCompliance)
	if l > 0 {
		n += 2 + l + sovWeb(uint64(l))
	}
	if m.IsDeleted {
		n += 3
	}
	l = len(m.AddressHash)
	if l > 0 {
		n += 2 + l + sovWeb(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 2 + l + sovWeb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HTTPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponseID != 0 {
		n += 1 + sovWeb(uint64(m.ResponseID))
	}
	if m.OrgID != 0 {
		n += 1 + sovWeb(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovWeb(uint64(m.GroupID))
	}
	l = len(m.Scheme)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.AddressHash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.ResponsePort)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.RequestedPort)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovWeb(uint64(m.Status))
	}
	l = len(m.StatusText)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWeb(uint64(len(k))) + 1 + len(v) + sovWeb(uint64(len(v)))
			n += mapEntrySize + 1 + sovWeb(uint64(mapEntrySize))
		}
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.RawBodyLink)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.RawBodyHash)
	if l > 0 {
		n += 2 + l + sovWeb(uint64(l))
	}
	if m.ResponseTimestamp != 0 {
		n += 2 + sovWeb(uint64(m.ResponseTimestamp))
	}
	if m.IsDocument {
		n += 3
	}
	if m.WebCertificate != nil {
		l = m.WebCertificate.Size()
		n += 2 + l + sovWeb(uint64(l))
	}
	if m.IsDeleted {
		n += 3
	}
	if m.URLRequestTimestamp != 0 {
		n += 2 + sovWeb(uint64(m.URLRequestTimestamp))
	}
	l = len(m.LoadHostAddress)
	if l > 0 {
		n += 2 + l + sovWeb(uint64(l))
	}
	l = len(m.LoadIPAddress)
	if l > 0 {
		n += 2 + l + sovWeb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovWeb(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovWeb(uint64(m.GroupID))
	}
	if m.SnapshotID != 0 {
		n += 1 + sovWeb(uint64(m.SnapshotID))
	}
	l = len(m.SnapshotLink)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.SerializedDOMLink)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.ResponseTimestamp != 0 {
		n += 1 + sovWeb(uint64(m.ResponseTimestamp))
	}
	if m.IsDeleted {
		n += 2
	}
	l = len(m.SerializedDOMHash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.AddressHash)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.ResponsePort != 0 {
		n += 1 + sovWeb(uint64(m.ResponsePort))
	}
	l = len(m.Scheme)
	if l > 0 {
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebResponseFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovWeb(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovWeb(uint64(m.GroupID))
	}
	if m.Start != 0 {
		n += 1 + sovWeb(uint64(m.Start))
	}
	if m.Limit != 0 {
		n += 1 + sovWeb(uint64(m.Limit))
	}
	if m.Filters != nil {
		l = m.Filters.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebCertificateFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovWeb(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovWeb(uint64(m.GroupID))
	}
	if m.Start != 0 {
		n += 1 + sovWeb(uint64(m.Start))
	}
	if m.Limit != 0 {
		n += 1 + sovWeb(uint64(m.Limit))
	}
	if m.Filters != nil {
		l = m.Filters.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WebSnapshotFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovWeb(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovWeb(uint64(m.GroupID))
	}
	if m.Start != 0 {
		n += 1 + sovWeb(uint64(m.Start))
	}
	if m.Limit != 0 {
		n += 1 + sovWeb(uint64(m.Limit))
	}
	if m.Filters != nil {
		l = m.Filters.Size()
		n += 1 + l + sovWeb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWeb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWeb(x uint64) (n int) {
	return sovWeb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScanGroupWebDataStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanGroupWebDataStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanGroupWebDataStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiringCerts15Days", wireType)
			}
			m.ExpiringCerts15Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiringCerts15Days |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiringCerts30Days", wireType)
			}
			m.ExpiringCerts30Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiringCerts30Days |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueWebServers", wireType)
			}
			m.UniqueWebServers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UniqueWebServers |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerTypes == nil {
				m.ServerTypes = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWeb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWeb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWeb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWeb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWeb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthWeb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ServerTypes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URLData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseID", wireType)
			}
			m.ResponseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawBodyLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawBodyLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *URLListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: URLListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: URLListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field URLRequestTimestamp", wireType)
			}
			m.URLRequestTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.URLRequestTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URLs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URLs = append(m.URLs, &URLData{})
			if err := m.URLs[len(m.URLs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &AddressData{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &HTTPResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedDOMHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedDOMHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedDOMLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedDOMLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTimestamp", wireType)
			}
			m.ResponseTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field URLRequestTimestamp", wireType)
			}
			m.URLRequestTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.URLRequestTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsePort", wireType)
			}
			m.ResponsePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponsePort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebCertificate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebCertificate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebCertificate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateID", wireType)
			}
			m.CertificateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertificateID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTimestamp", wireType)
			}
			m.ResponseTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyExchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyExchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyExchangeGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyExchangeGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cipher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cipher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateValue", wireType)
			}
			m.CertificateValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CertificateValue |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SanList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SanList = append(m.SanList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidFrom", wireType)
			}
			m.ValidFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidFrom |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidTo", wireType)
			}
			m.ValidTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidTo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateTransparencyCompliance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificateTransparencyCompliance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseID", wireType)
			}
			m.ResponseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponsePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWeb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWeb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWeb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWeb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWeb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWeb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthWeb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawBodyLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawBodyLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawBodyHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawBodyHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTimestamp", wireType)
			}
			m.ResponseTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDocument", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDocument = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebCertificate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WebCertificate == nil {
				m.WebCertificate = &WebCertificate{}
			}
			if err := m.WebCertificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field URLRequestTimestamp", wireType)
			}
			m.URLRequestTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.URLRequestTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadHostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadHostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadIPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadIPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotID", wireType)
			}
			m.SnapshotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnapshotLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedDOMLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedDOMLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTimestamp", wireType)
			}
			m.ResponseTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedDOMHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedDOMHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsePort", wireType)
			}
			m.ResponsePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponsePort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebResponseFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebResponseFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebResponseFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filters == nil {
				m.Filters = &FilterType{}
			}
			if err := m.Filters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebCertificateFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebCertificateFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebCertificateFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filters == nil {
				m.Filters = &FilterType{}
			}
			if err := m.Filters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebSnapshotFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebSnapshotFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebSnapshotFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWeb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filters == nil {
				m.Filters = &FilterType{}
			}
			if err := m.Filters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWeb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWeb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWeb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWeb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWeb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWeb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWeb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWeb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWeb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWeb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("prototypes/web.proto", fileDescriptor_web_e54209c67fb0e08f) }

var fileDescriptor_web_e54209c67fb0e08f = []byte{
	// 1211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4b, 0x6f, 0x1b, 0x37,
	0x10, 0xae, 0xac, 0xe7, 0x72, 0xe5, 0xd7, 0x46, 0x49, 0x17, 0x6e, 0x20, 0xa8, 0x42, 0x1f, 0x46,
	0x1f, 0x72, 0xe2, 0xb4, 0x68, 0x91, 0x43, 0x81, 0xc6, 0x4a, 0x6a, 0xa1, 0x4a, 0x63, 0x50, 0x52,
	0x0c, 0xf4, 0x46, 0xad, 0x18, 0x8b, 0xb5, 0x76, 0x57, 0x59, 0x52, 0x8e, 0xd5, 0x1f, 0x52, 0xb4,
	0x7f, 0xa7, 0xa7, 0x1e, 0xdb, 0x63, 0x6f, 0x85, 0x8b, 0x5e, 0xfb, 0x1b, 0x0a, 0x0e, 0xb9, 0x16,
	0x77, 0x57, 0x82, 0x62, 0xa0, 0x87, 0xdc, 0x38, 0xdf, 0x0c, 0xb9, 0x9c, 0x99, 0x6f, 0x66, 0xb8,
	0xa8, 0x36, 0x8d, 0x42, 0x11, 0x8a, 0xf9, 0x94, 0xf2, 0x83, 0x57, 0x74, 0xd8, 0x02, 0x71, 0xcf,
	0x35, 0x50, 0x32, 0x1a, 0x45, 0x94, 0x73, 0xad, 0x79, 0xc7, 0xd0, 0xbc, 0x60, 0x13, 0x41, 0x23,
	0xb9, 0x56, 0xca, 0xe6, 0xd5, 0x06, 0xba, 0xdd, 0xf3, 0x48, 0xf0, 0x4d, 0x14, 0xce, 0xa6, 0xa7,
	0x74, 0xd8, 0x26, 0x82, 0xf4, 0x04, 0x11, 0xdc, 0xa9, 0xa1, 0xe2, 0xb3, 0xe8, 0xac, 0xd3, 0x76,
	0x73, 0x8d, 0xdc, 0x7e, 0x11, 0x2b, 0xc1, 0x71, 0x51, 0x19, 0x4c, 0x3b, 0x6d, 0x77, 0x03, 0xf0,
	0x58, 0x74, 0xee, 0xa1, 0x5b, 0x8f, 0x2f, 0xa7, 0x2c, 0x62, 0xc1, 0xd9, 0x11, 0x8d, 0x04, 0xbf,
	0xff, 0x79, 0x9b, 0xcc, 0xb9, 0x9b, 0x07, 0xab, 0x65, 0xaa, 0xcc, 0x8e, 0x07, 0xf7, 0x60, 0x47,
	0x61, 0xc9, 0x0e, 0xa5, 0x72, 0x3e, 0x42, 0x3b, 0x83, 0x80, 0xbd, 0x9c, 0xd1, 0x53, 0x3a, 0xec,
	0xd1, 0xe8, 0x82, 0x46, 0xdc, 0x2d, 0x82, 0x79, 0x06, 0x77, 0x3a, 0xc8, 0x56, 0xcb, 0xbe, 0xf4,
	0xdc, 0x2d, 0x35, 0xf2, 0xfb, 0xf6, 0xe1, 0x87, 0xad, 0xa5, 0xce, 0xb6, 0x0c, 0xcb, 0xc7, 0x81,
	0x88, 0xe6, 0xd8, 0xdc, 0xbb, 0xf7, 0x15, 0xda, 0x49, 0x1b, 0x38, 0x3b, 0x28, 0x7f, 0x4e, 0xe7,
	0x10, 0x1c, 0x0b, 0xcb, 0xa5, 0x0c, 0xd8, 0x05, 0x99, 0xcc, 0xa8, 0x0e, 0x8c, 0x12, 0x1e, 0x6e,
	0x7c, 0x99, 0x6b, 0xce, 0x51, 0x79, 0x80, 0xbb, 0xf2, 0x6b, 0x4e, 0x1d, 0x21, 0x4c, 0xf9, 0x34,
	0x0c, 0x38, 0xd5, 0xa1, 0xcd, 0x63, 0x03, 0x91, 0xc7, 0x0e, 0x70, 0x17, 0x8e, 0xb0, 0xb0, 0x5c,
	0x3a, 0x0d, 0x64, 0x63, 0xf2, 0xea, 0x51, 0x38, 0x9a, 0x77, 0x59, 0x70, 0x0e, 0xf1, 0xb4, 0xb0,
	0x09, 0x39, 0x7b, 0xa8, 0xf2, 0x94, 0xf9, 0x54, 0x5e, 0x0e, 0x82, 0x67, 0xe1, 0x6b, 0xb9, 0xf9,
	0x47, 0x0e, 0x6d, 0x0f, 0x70, 0xb7, 0xcb, 0xb8, 0x88, 0xbf, 0x72, 0xe3, 0xcc, 0x36, 0x90, 0x7d,
	0x1c, 0x72, 0xf1, 0xb5, 0x62, 0x55, 0x7c, 0x03, 0x03, 0x72, 0xee, 0x22, 0xab, 0x73, 0x12, 0xeb,
	0xd5, 0x15, 0x16, 0x80, 0xcc, 0xf3, 0x00, 0x77, 0x31, 0x7d, 0x39, 0xa3, 0x5c, 0xf4, 0x99, 0x4f,
	0xb9, 0x20, 0xfe, 0x14, 0x12, 0x97, 0xc7, 0xcb, 0x54, 0xce, 0x5d, 0x54, 0x18, 0xe0, 0x6e, 0x9c,
	0xb4, 0x4a, 0x4b, 0x47, 0x0f, 0x03, 0xda, 0xfc, 0x37, 0x8f, 0xca, 0x3a, 0x7b, 0xce, 0x07, 0xa8,
	0x1c, 0x7f, 0x57, 0x7a, 0x63, 0x1f, 0x56, 0x5b, 0x5a, 0x86, 0x0d, 0xb1, 0xd2, 0xf9, 0x18, 0x59,
	0xb1, 0xff, 0xdc, 0xdd, 0x80, 0x63, 0x37, 0x5b, 0xc7, 0xfd, 0xfe, 0x49, 0x8c, 0xe2, 0x85, 0xde,
	0x69, 0xa2, 0x6a, 0x2f, 0x20, 0x53, 0x3e, 0x0e, 0x85, 0x11, 0xf3, 0x04, 0xe6, 0x7c, 0x82, 0x76,
	0x7b, 0x34, 0x62, 0x64, 0xc2, 0x7e, 0xa4, 0xa3, 0xf6, 0xb3, 0xa7, 0xc7, 0x84, 0x8f, 0xb5, 0xeb,
	0x59, 0x45, 0xc6, 0x1a, 0x8e, 0x2d, 0x2e, 0xb1, 0x8e, 0xcf, 0x8e, 0x2f, 0xb3, 0x08, 0x57, 0x09,
	0xc2, 0x95, 0x55, 0xac, 0x0a, 0x6f, 0x79, 0x75, 0x78, 0x35, 0xc9, 0x2a, 0x09, 0x92, 0xe9, 0x48,
	0x81, 0x1f, 0x96, 0x4a, 0xb1, 0x01, 0xa5, 0x49, 0x80, 0xd6, 0x90, 0xc0, 0x4e, 0x93, 0xe0, 0x0e,
	0x2a, 0xf5, 0xbc, 0x31, 0xf5, 0xa9, 0x5b, 0x05, 0x95, 0x96, 0x64, 0xac, 0x63, 0x97, 0x4e, 0xc2,
	0x48, 0xb8, 0x9b, 0xc0, 0xbd, 0x04, 0xd6, 0xfc, 0xb5, 0x88, 0xb6, 0x4e, 0xe9, 0x50, 0x76, 0x02,
	0xf6, 0x82, 0x79, 0x44, 0xdc, 0x9c, 0xc3, 0xef, 0xa1, 0x4d, 0x63, 0x7b, 0xa7, 0x0d, 0x39, 0xcd,
	0xe3, 0x24, 0xb8, 0x3c, 0xf0, 0x85, 0x55, 0x81, 0x4f, 0x85, 0xa4, 0x98, 0x0d, 0x89, 0x83, 0x0a,
	0xe0, 0x54, 0x09, 0x54, 0xb0, 0x96, 0xd5, 0x7a, 0x22, 0x5b, 0xaf, 0x17, 0x4e, 0x20, 0x47, 0x16,
	0xbe, 0x96, 0xe5, 0x89, 0xdf, 0xd2, 0xf9, 0xe3, 0x4b, 0x6f, 0x4c, 0x82, 0x33, 0xaa, 0x13, 0x64,
	0x42, 0xb2, 0x03, 0x1a, 0x22, 0x78, 0xa7, 0xb3, 0x95, 0xc1, 0x65, 0xc8, 0x8f, 0xd8, 0x74, 0x4c,
	0x23, 0x9d, 0x2d, 0x2d, 0xc9, 0xf4, 0x3f, 0x25, 0x9e, 0x4e, 0x91, 0x5c, 0xca, 0x53, 0x8d, 0x40,
	0x3c, 0x87, 0x2e, 0x56, 0x55, 0x7d, 0x35, 0x8d, 0xcb, 0x3b, 0xf6, 0x66, 0xc3, 0x1f, 0xa8, 0x27,
	0xbe, 0x23, 0x3e, 0x85, 0x7c, 0x59, 0xd8, 0x84, 0x64, 0x16, 0x7a, 0x24, 0x90, 0x2d, 0xc7, 0xdd,
	0x6a, 0xe4, 0xf7, 0x2d, 0x1c, 0x8b, 0xf2, 0x46, 0x1d, 0xce, 0x67, 0x34, 0x72, 0xb7, 0xd5, 0x8d,
	0x94, 0x24, 0xa9, 0xf3, 0x9c, 0x4c, 0xd8, 0xe8, 0x49, 0x14, 0xfa, 0xee, 0x0e, 0xc4, 0x7b, 0x01,
	0xc8, 0xf3, 0x40, 0xe8, 0x87, 0xee, 0x2e, 0xe8, 0x62, 0xd1, 0xe9, 0xa2, 0x77, 0x8d, 0xfb, 0xf5,
	0x23, 0x12, 0xf0, 0x29, 0x89, 0x68, 0xe0, 0xcd, 0x8f, 0x42, 0x7f, 0x3a, 0x61, 0x24, 0xf0, 0xa8,
	0xeb, 0xc0, 0xa7, 0xd6, 0x1b, 0x02, 0x81, 0x79, 0x9b, 0x4e, 0xa8, 0xa0, 0x23, 0xf7, 0x56, 0x23,
	0xb7, 0x5f, 0xc1, 0x0b, 0x20, 0x5d, 0x22, 0xb5, 0x6c, 0x89, 0x24, 0x0a, 0xe0, 0x76, 0xaa, 0x00,
	0x9a, 0xff, 0x94, 0x50, 0xd5, 0x6c, 0x38, 0x6b, 0x47, 0xc1, 0x35, 0xc5, 0x37, 0x56, 0x50, 0x3c,
	0x9f, 0xa4, 0xf8, 0xa2, 0xc2, 0x0a, 0x89, 0x0a, 0x5b, 0x4f, 0xd3, 0xc4, 0xc5, 0x4b, 0xe9, 0xca,
	0x4d, 0x39, 0x5e, 0xce, 0x3a, 0x9e, 0xae, 0x61, 0xc5, 0xdb, 0x04, 0x26, 0x0b, 0x50, 0xf7, 0x21,
	0x3a, 0x02, 0x23, 0xc5, 0xda, 0x24, 0x08, 0x3e, 0x08, 0x22, 0x66, 0xaa, 0xc1, 0x14, 0xb1, 0x96,
	0x64, 0xac, 0xd4, 0xaa, 0x4f, 0x2f, 0x85, 0x66, 0xae, 0x81, 0xc4, 0x1d, 0xad, 0xba, 0xe8, 0x68,
	0x9f, 0xa1, 0xf2, 0x31, 0x25, 0x23, 0xf9, 0x42, 0xd8, 0x84, 0x76, 0xbf, 0x97, 0x68, 0xf7, 0x2d,
	0xad, 0x54, 0xd3, 0x3e, 0x36, 0x4d, 0x8c, 0xd2, 0xad, 0xe4, 0x28, 0x4d, 0x0f, 0xe2, 0xed, 0xec,
	0x20, 0x5e, 0x58, 0x40, 0xa4, 0x76, 0x12, 0x16, 0xf1, 0x1c, 0xc8, 0x36, 0x98, 0xdd, 0x55, 0x0d,
	0xa6, 0x8e, 0x50, 0x87, 0xb7, 0x43, 0x6f, 0xe6, 0xd3, 0x40, 0x00, 0x8f, 0x2b, 0xd8, 0x40, 0x9c,
	0x2f, 0xd2, 0x6d, 0x11, 0x58, 0x6b, 0x1f, 0x6e, 0xb7, 0x92, 0x30, 0x4e, 0x77, 0xcf, 0x04, 0xd3,
	0x6b, 0x69, 0xa6, 0xaf, 0x18, 0x28, 0xb7, 0x57, 0x0f, 0x94, 0x7d, 0xb4, 0xdd, 0x0d, 0xc9, 0xc8,
	0xa4, 0xd9, 0x1d, 0x70, 0x3e, 0x0d, 0x4b, 0x1a, 0x48, 0x68, 0x41, 0xb7, 0xb7, 0x15, 0x0d, 0x12,
	0xe0, 0xde, 0x43, 0x54, 0x35, 0xf3, 0xb3, 0xee, 0xb1, 0x65, 0x99, 0x8f, 0xad, 0x3f, 0xf3, 0xc8,
	0x96, 0xcf, 0x40, 0x3d, 0xac, 0x6f, 0x3c, 0x29, 0x24, 0xd5, 0xf4, 0xde, 0xeb, 0x31, 0x61, 0x20,
	0x99, 0xc7, 0x41, 0xe1, 0x35, 0x1e, 0x07, 0xff, 0xe7, 0xb8, 0x4f, 0xe4, 0xae, 0x9c, 0xce, 0xdd,
	0xd2, 0x67, 0x49, 0x65, 0xd5, 0xb3, 0x44, 0x97, 0x8d, 0xb5, 0xf2, 0x21, 0x80, 0xd6, 0x3e, 0x04,
	0xec, 0x35, 0xed, 0xa4, 0x9a, 0x6e, 0x27, 0xaf, 0x31, 0xf0, 0x8d, 0x56, 0xb6, 0x65, 0xb6, 0xb2,
	0xe6, 0x4f, 0x39, 0xb4, 0x7b, 0x4a, 0x87, 0xb1, 0xed, 0x13, 0xf8, 0x9b, 0xb9, 0x71, 0x86, 0x6b,
	0xa8, 0xd8, 0x13, 0x24, 0x12, 0x3a, 0xb9, 0x4a, 0x90, 0x68, 0x97, 0xf9, 0x4c, 0xe8, 0xff, 0x0f,
	0x25, 0x38, 0xef, 0xa3, 0xb2, 0xfa, 0x8a, 0x6a, 0x9c, 0xf6, 0xa1, 0xdd, 0x52, 0xb2, 0x6c, 0x09,
	0x38, 0xd6, 0x35, 0x7f, 0xc9, 0xa1, 0x5a, 0xb2, 0xc6, 0xde, 0x9c, 0xbb, 0xe9, 0xa0, 0xc5, 0x04,
	0x7d, 0x63, 0x2e, 0xf6, 0xe8, 0xe8, 0xb7, 0xab, 0x7a, 0xee, 0xf7, 0xab, 0x7a, 0xee, 0xaf, 0xab,
	0x7a, 0xee, 0xe7, 0xbf, 0xeb, 0x6f, 0x7d, 0x7f, 0xff, 0x8c, 0x89, 0xf1, 0x6c, 0xd8, 0xf2, 0x42,
	0xff, 0x60, 0xc2, 0x82, 0x73, 0xc2, 0x3e, 0x65, 0xe1, 0x01, 0xf1, 0x0f, 0xe0, 0x67, 0xd5, 0xe3,
	0x34, 0xba, 0x60, 0x1e, 0xe5, 0x07, 0x8b, 0x3f, 0xda, 0x61, 0x09, 0xd6, 0x0f, 0xfe, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0xa9, 0xe1, 0xcb, 0xa5, 0x16, 0x0f, 0x00, 0x00,
}
