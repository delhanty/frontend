// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: prototypes/portscan.proto

package prototypes // import "github.com/linkai-io/am/protocservices/prototypes"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PortData struct {
	IPAddress            string   `protobuf:"bytes,1,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	TCPPorts             []int32  `protobuf:"varint,2,rep,packed,name=TCPPorts" json:"TCPPorts,omitempty"`
	UDPPorts             []int32  `protobuf:"varint,3,rep,packed,name=UDPPorts" json:"UDPPorts,omitempty"`
	TCPBanners           []string `protobuf:"bytes,4,rep,name=TCPBanners" json:"TCPBanners,omitempty"`
	UDPBanners           []string `protobuf:"bytes,5,rep,name=UDPBanners" json:"UDPBanners,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortData) Reset()         { *m = PortData{} }
func (m *PortData) String() string { return proto.CompactTextString(m) }
func (*PortData) ProtoMessage()    {}
func (*PortData) Descriptor() ([]byte, []int) {
	return fileDescriptor_portscan_9db9a82cf4014431, []int{0}
}
func (m *PortData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PortData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortData.Merge(dst, src)
}
func (m *PortData) XXX_Size() int {
	return m.Size()
}
func (m *PortData) XXX_DiscardUnknown() {
	xxx_messageInfo_PortData.DiscardUnknown(m)
}

var xxx_messageInfo_PortData proto.InternalMessageInfo

func (m *PortData) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *PortData) GetTCPPorts() []int32 {
	if m != nil {
		return m.TCPPorts
	}
	return nil
}

func (m *PortData) GetUDPPorts() []int32 {
	if m != nil {
		return m.UDPPorts
	}
	return nil
}

func (m *PortData) GetTCPBanners() []string {
	if m != nil {
		return m.TCPBanners
	}
	return nil
}

func (m *PortData) GetUDPBanners() []string {
	if m != nil {
		return m.UDPBanners
	}
	return nil
}

type Ports struct {
	Current              *PortData `protobuf:"bytes,1,opt,name=Current" json:"Current,omitempty"`
	Previous             *PortData `protobuf:"bytes,2,opt,name=Previous" json:"Previous,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Ports) Reset()         { *m = Ports{} }
func (m *Ports) String() string { return proto.CompactTextString(m) }
func (*Ports) ProtoMessage()    {}
func (*Ports) Descriptor() ([]byte, []int) {
	return fileDescriptor_portscan_9db9a82cf4014431, []int{1}
}
func (m *Ports) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ports) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ports.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Ports) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ports.Merge(dst, src)
}
func (m *Ports) XXX_Size() int {
	return m.Size()
}
func (m *Ports) XXX_DiscardUnknown() {
	xxx_messageInfo_Ports.DiscardUnknown(m)
}

var xxx_messageInfo_Ports proto.InternalMessageInfo

func (m *Ports) GetCurrent() *PortData {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *Ports) GetPrevious() *PortData {
	if m != nil {
		return m.Previous
	}
	return nil
}

type PortResults struct {
	PortID                   int64    `protobuf:"varint,1,opt,name=PortID,proto3" json:"PortID,omitempty"`
	OrgID                    int32    `protobuf:"varint,2,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID                  int32    `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	HostAddress              string   `protobuf:"bytes,4,opt,name=HostAddress,proto3" json:"HostAddress,omitempty"`
	Ports                    *Ports   `protobuf:"bytes,5,opt,name=Ports" json:"Ports,omitempty"`
	ScannedTimestamp         int64    `protobuf:"varint,6,opt,name=ScannedTimestamp,proto3" json:"ScannedTimestamp,omitempty"`
	PreviousScannedTimestamp int64    `protobuf:"varint,7,opt,name=PreviousScannedTimestamp,proto3" json:"PreviousScannedTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *PortResults) Reset()         { *m = PortResults{} }
func (m *PortResults) String() string { return proto.CompactTextString(m) }
func (*PortResults) ProtoMessage()    {}
func (*PortResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_portscan_9db9a82cf4014431, []int{2}
}
func (m *PortResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PortResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortResults.Merge(dst, src)
}
func (m *PortResults) XXX_Size() int {
	return m.Size()
}
func (m *PortResults) XXX_DiscardUnknown() {
	xxx_messageInfo_PortResults.DiscardUnknown(m)
}

var xxx_messageInfo_PortResults proto.InternalMessageInfo

func (m *PortResults) GetPortID() int64 {
	if m != nil {
		return m.PortID
	}
	return 0
}

func (m *PortResults) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *PortResults) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *PortResults) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *PortResults) GetPorts() *Ports {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *PortResults) GetScannedTimestamp() int64 {
	if m != nil {
		return m.ScannedTimestamp
	}
	return 0
}

func (m *PortResults) GetPreviousScannedTimestamp() int64 {
	if m != nil {
		return m.PreviousScannedTimestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*PortData)(nil), "PortData")
	proto.RegisterType((*Ports)(nil), "Ports")
	proto.RegisterType((*PortResults)(nil), "PortResults")
}
func (m *PortData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IPAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPortscan(dAtA, i, uint64(len(m.IPAddress)))
		i += copy(dAtA[i:], m.IPAddress)
	}
	if len(m.TCPPorts) > 0 {
		dAtA2 := make([]byte, len(m.TCPPorts)*10)
		var j1 int
		for _, num1 := range m.TCPPorts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPortscan(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.UDPPorts) > 0 {
		dAtA4 := make([]byte, len(m.UDPPorts)*10)
		var j3 int
		for _, num1 := range m.UDPPorts {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPortscan(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.TCPBanners) > 0 {
		for _, s := range m.TCPBanners {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.UDPBanners) > 0 {
		for _, s := range m.UDPBanners {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Ports) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ports) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Current != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPortscan(dAtA, i, uint64(m.Current.Size()))
		n5, err := m.Current.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Previous != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPortscan(dAtA, i, uint64(m.Previous.Size()))
		n6, err := m.Previous.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PortResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortResults) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PortID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPortscan(dAtA, i, uint64(m.PortID))
	}
	if m.OrgID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPortscan(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPortscan(dAtA, i, uint64(m.GroupID))
	}
	if len(m.HostAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPortscan(dAtA, i, uint64(len(m.HostAddress)))
		i += copy(dAtA[i:], m.HostAddress)
	}
	if m.Ports != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPortscan(dAtA, i, uint64(m.Ports.Size()))
		n7, err := m.Ports.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.ScannedTimestamp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPortscan(dAtA, i, uint64(m.ScannedTimestamp))
	}
	if m.PreviousScannedTimestamp != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPortscan(dAtA, i, uint64(m.PreviousScannedTimestamp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPortscan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PortData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovPortscan(uint64(l))
	}
	if len(m.TCPPorts) > 0 {
		l = 0
		for _, e := range m.TCPPorts {
			l += sovPortscan(uint64(e))
		}
		n += 1 + sovPortscan(uint64(l)) + l
	}
	if len(m.UDPPorts) > 0 {
		l = 0
		for _, e := range m.UDPPorts {
			l += sovPortscan(uint64(e))
		}
		n += 1 + sovPortscan(uint64(l)) + l
	}
	if len(m.TCPBanners) > 0 {
		for _, s := range m.TCPBanners {
			l = len(s)
			n += 1 + l + sovPortscan(uint64(l))
		}
	}
	if len(m.UDPBanners) > 0 {
		for _, s := range m.UDPBanners {
			l = len(s)
			n += 1 + l + sovPortscan(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ports) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Current != nil {
		l = m.Current.Size()
		n += 1 + l + sovPortscan(uint64(l))
	}
	if m.Previous != nil {
		l = m.Previous.Size()
		n += 1 + l + sovPortscan(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PortResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PortID != 0 {
		n += 1 + sovPortscan(uint64(m.PortID))
	}
	if m.OrgID != 0 {
		n += 1 + sovPortscan(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovPortscan(uint64(m.GroupID))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovPortscan(uint64(l))
	}
	if m.Ports != nil {
		l = m.Ports.Size()
		n += 1 + l + sovPortscan(uint64(l))
	}
	if m.ScannedTimestamp != 0 {
		n += 1 + sovPortscan(uint64(m.ScannedTimestamp))
	}
	if m.PreviousScannedTimestamp != 0 {
		n += 1 + sovPortscan(uint64(m.PreviousScannedTimestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPortscan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPortscan(x uint64) (n int) {
	return sovPortscan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PortData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortscan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortscan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPortscan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TCPPorts = append(m.TCPPorts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPortscan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPortscan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TCPPorts) == 0 {
					m.TCPPorts = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPortscan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TCPPorts = append(m.TCPPorts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TCPPorts", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPortscan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UDPPorts = append(m.UDPPorts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPortscan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPortscan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UDPPorts) == 0 {
					m.UDPPorts = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPortscan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UDPPorts = append(m.UDPPorts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UDPPorts", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCPBanners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortscan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TCPBanners = append(m.TCPBanners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UDPBanners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortscan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UDPBanners = append(m.UDPBanners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPortscan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortscan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ports) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortscan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ports: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ports: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Current", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPortscan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Current == nil {
				m.Current = &PortData{}
			}
			if err := m.Current.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPortscan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Previous == nil {
				m.Previous = &PortData{}
			}
			if err := m.Previous.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPortscan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortscan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPortscan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortID", wireType)
			}
			m.PortID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PortID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPortscan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPortscan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ports == nil {
				m.Ports = &Ports{}
			}
			if err := m.Ports.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScannedTimestamp", wireType)
			}
			m.ScannedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScannedTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousScannedTimestamp", wireType)
			}
			m.PreviousScannedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousScannedTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPortscan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPortscan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPortscan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPortscan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPortscan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPortscan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPortscan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPortscan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPortscan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPortscan   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("prototypes/portscan.proto", fileDescriptor_portscan_9db9a82cf4014431) }

var fileDescriptor_portscan_9db9a82cf4014431 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x6b, 0xdb, 0x30,
	0x18, 0xc6, 0xe7, 0x39, 0x76, 0xe2, 0x37, 0x97, 0x21, 0xc6, 0xd0, 0x46, 0x30, 0x26, 0x63, 0x10,
	0x06, 0x8b, 0xd9, 0x76, 0xeb, 0xad, 0xb1, 0xa1, 0xf5, 0xa9, 0x46, 0x49, 0x2e, 0xbd, 0x39, 0x8e,
	0x48, 0x4d, 0x63, 0xcb, 0x48, 0x72, 0xa0, 0xdf, 0xa4, 0xc7, 0x7e, 0x9c, 0x1e, 0xfb, 0x11, 0x4a,
	0xfa, 0x39, 0x0a, 0x45, 0xf2, 0x9f, 0x84, 0x86, 0xde, 0xf4, 0x3c, 0x3f, 0xe9, 0xe5, 0x79, 0xc4,
	0x0b, 0xdf, 0x4b, 0xce, 0x24, 0x93, 0x77, 0x25, 0x15, 0x7e, 0xc9, 0xb8, 0x14, 0x69, 0x52, 0x4c,
	0xb5, 0x37, 0x7e, 0x30, 0x60, 0x10, 0x33, 0x2e, 0xc3, 0x44, 0x26, 0x68, 0x04, 0x4e, 0x14, 0x9f,
	0xaf, 0xd7, 0x9c, 0x0a, 0x81, 0x0d, 0xcf, 0x98, 0x38, 0xe4, 0x60, 0xa0, 0x1f, 0x30, 0x58, 0x04,
	0xb1, 0xba, 0x2c, 0xf0, 0x67, 0xcf, 0x9c, 0x58, 0xa4, 0xd3, 0x8a, 0x2d, 0xc3, 0x86, 0x99, 0x35,
	0x6b, 0x35, 0x72, 0x01, 0x16, 0x41, 0x3c, 0x4b, 0x8a, 0x82, 0x72, 0x81, 0x7b, 0x9e, 0x39, 0x71,
	0xc8, 0x91, 0xa3, 0xf8, 0x32, 0xec, 0xb8, 0x55, 0xf3, 0x83, 0x33, 0x9e, 0x83, 0x55, 0x0f, 0xfa,
	0x09, 0xfd, 0xa0, 0xe2, 0x9c, 0x16, 0x52, 0x87, 0x1b, 0xfe, 0x73, 0xa6, 0x6d, 0x74, 0xd2, 0x12,
	0xf4, 0x0b, 0x06, 0x31, 0xa7, 0xbb, 0x8c, 0x55, 0x2a, 0xe5, 0xbb, 0x5b, 0x1d, 0x1a, 0xbf, 0x1a,
	0x30, 0x54, 0x36, 0xa1, 0xa2, 0xda, 0x4a, 0x81, 0xbe, 0x81, 0xad, 0x64, 0x14, 0xea, 0xd1, 0x26,
	0x69, 0x14, 0xfa, 0x0a, 0xd6, 0x15, 0xdf, 0x44, 0xa1, 0x9e, 0x65, 0x91, 0x5a, 0x20, 0x0c, 0xfd,
	0x0b, 0xce, 0xaa, 0x32, 0x0a, 0xb1, 0xa9, 0xfd, 0x56, 0x22, 0x0f, 0x86, 0x97, 0x4c, 0xc8, 0xf6,
	0x13, 0x7b, 0xfa, 0x13, 0x8f, 0x2d, 0x34, 0x6a, 0xea, 0x60, 0x4b, 0xa7, 0xb3, 0x75, 0x3a, 0x41,
	0x9a, 0x8e, 0xbf, 0xe1, 0xcb, 0x3c, 0x55, 0xc5, 0xd7, 0x8b, 0x2c, 0xa7, 0x42, 0x26, 0x79, 0x89,
	0x6d, 0x9d, 0xe8, 0xc4, 0x47, 0x67, 0x80, 0xdb, 0x3e, 0x27, 0x6f, 0xfa, 0xfa, 0xcd, 0x87, 0x7c,
	0x16, 0x3c, 0xee, 0x5d, 0xe3, 0x69, 0xef, 0x1a, 0xcf, 0x7b, 0xd7, 0xb8, 0x7f, 0x71, 0x3f, 0x5d,
	0xff, 0xdd, 0x64, 0xf2, 0xa6, 0x5a, 0x4d, 0x53, 0x96, 0xfb, 0xdb, 0xac, 0xb8, 0x4d, 0xb2, 0x3f,
	0x19, 0xf3, 0x93, 0xdc, 0xd7, 0x8b, 0x92, 0x0a, 0xca, 0x77, 0x59, 0xaa, 0x16, 0xa8, 0xdb, 0xa5,
	0x95, 0xad, 0xcf, 0xff, 0xdf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd0, 0xdf, 0x6a, 0x30, 0x60, 0x02,
	0x00, 0x00,
}
