// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: prototypes/address.proto

package prototypes // import "github.com/linkai-io/am/protocservices/prototypes"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddressData struct {
	OrgID                int32    `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	AddressID            int64    `protobuf:"varint,2,opt,name=AddressID,proto3" json:"AddressID,omitempty"`
	GroupID              int32    `protobuf:"varint,3,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	HostAddress          string   `protobuf:"bytes,4,opt,name=HostAddress,proto3" json:"HostAddress,omitempty"`
	IPAddress            string   `protobuf:"bytes,5,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	DiscoveryTime        int64    `protobuf:"varint,6,opt,name=DiscoveryTime,proto3" json:"DiscoveryTime,omitempty"`
	DiscoveredBy         string   `protobuf:"bytes,7,opt,name=DiscoveredBy,proto3" json:"DiscoveredBy,omitempty"`
	LastScannedTime      int64    `protobuf:"varint,8,opt,name=LastScannedTime,proto3" json:"LastScannedTime,omitempty"`
	LastSeenTime         int64    `protobuf:"varint,9,opt,name=LastSeenTime,proto3" json:"LastSeenTime,omitempty"`
	ConfidenceScore      float32  `protobuf:"fixed32,10,opt,name=ConfidenceScore,proto3" json:"ConfidenceScore,omitempty"`
	UserConfidenceScore  float32  `protobuf:"fixed32,11,opt,name=UserConfidenceScore,proto3" json:"UserConfidenceScore,omitempty"`
	IsSOA                bool     `protobuf:"varint,12,opt,name=IsSOA,proto3" json:"IsSOA,omitempty"`
	IsWildcardZone       bool     `protobuf:"varint,13,opt,name=IsWildcardZone,proto3" json:"IsWildcardZone,omitempty"`
	IsHostedService      bool     `protobuf:"varint,14,opt,name=IsHostedService,proto3" json:"IsHostedService,omitempty"`
	Ignored              bool     `protobuf:"varint,15,opt,name=Ignored,proto3" json:"Ignored,omitempty"`
	Deleted              bool     `protobuf:"varint,16,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	FoundFrom            string   `protobuf:"bytes,17,opt,name=FoundFrom,proto3" json:"FoundFrom,omitempty"`
	NSRecord             int32    `protobuf:"varint,18,opt,name=NSRecord,proto3" json:"NSRecord,omitempty"`
	AddressHash          string   `protobuf:"bytes,19,opt,name=AddressHash,proto3" json:"AddressHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressData) Reset()         { *m = AddressData{} }
func (m *AddressData) String() string { return proto.CompactTextString(m) }
func (*AddressData) ProtoMessage()    {}
func (*AddressData) Descriptor() ([]byte, []int) {
	return fileDescriptor_address_4a5984b31bf47b9f, []int{0}
}
func (m *AddressData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddressData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressData.Merge(dst, src)
}
func (m *AddressData) XXX_Size() int {
	return m.Size()
}
func (m *AddressData) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressData.DiscardUnknown(m)
}

var xxx_messageInfo_AddressData proto.InternalMessageInfo

func (m *AddressData) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *AddressData) GetAddressID() int64 {
	if m != nil {
		return m.AddressID
	}
	return 0
}

func (m *AddressData) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *AddressData) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *AddressData) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *AddressData) GetDiscoveryTime() int64 {
	if m != nil {
		return m.DiscoveryTime
	}
	return 0
}

func (m *AddressData) GetDiscoveredBy() string {
	if m != nil {
		return m.DiscoveredBy
	}
	return ""
}

func (m *AddressData) GetLastScannedTime() int64 {
	if m != nil {
		return m.LastScannedTime
	}
	return 0
}

func (m *AddressData) GetLastSeenTime() int64 {
	if m != nil {
		return m.LastSeenTime
	}
	return 0
}

func (m *AddressData) GetConfidenceScore() float32 {
	if m != nil {
		return m.ConfidenceScore
	}
	return 0
}

func (m *AddressData) GetUserConfidenceScore() float32 {
	if m != nil {
		return m.UserConfidenceScore
	}
	return 0
}

func (m *AddressData) GetIsSOA() bool {
	if m != nil {
		return m.IsSOA
	}
	return false
}

func (m *AddressData) GetIsWildcardZone() bool {
	if m != nil {
		return m.IsWildcardZone
	}
	return false
}

func (m *AddressData) GetIsHostedService() bool {
	if m != nil {
		return m.IsHostedService
	}
	return false
}

func (m *AddressData) GetIgnored() bool {
	if m != nil {
		return m.Ignored
	}
	return false
}

func (m *AddressData) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *AddressData) GetFoundFrom() string {
	if m != nil {
		return m.FoundFrom
	}
	return ""
}

func (m *AddressData) GetNSRecord() int32 {
	if m != nil {
		return m.NSRecord
	}
	return 0
}

func (m *AddressData) GetAddressHash() string {
	if m != nil {
		return m.AddressHash
	}
	return ""
}

type HostListData struct {
	OrgID                int32    `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32    `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	ETLD                 string   `protobuf:"bytes,3,opt,name=ETLD,proto3" json:"ETLD,omitempty"`
	HostAddress          string   `protobuf:"bytes,4,opt,name=HostAddress,proto3" json:"HostAddress,omitempty"`
	IPAddresses          []string `protobuf:"bytes,5,rep,name=IPAddresses" json:"IPAddresses,omitempty"`
	AddressIDs           []int64  `protobuf:"varint,6,rep,packed,name=AddressIDs" json:"AddressIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostListData) Reset()         { *m = HostListData{} }
func (m *HostListData) String() string { return proto.CompactTextString(m) }
func (*HostListData) ProtoMessage()    {}
func (*HostListData) Descriptor() ([]byte, []int) {
	return fileDescriptor_address_4a5984b31bf47b9f, []int{1}
}
func (m *HostListData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostListData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostListData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HostListData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostListData.Merge(dst, src)
}
func (m *HostListData) XXX_Size() int {
	return m.Size()
}
func (m *HostListData) XXX_DiscardUnknown() {
	xxx_messageInfo_HostListData.DiscardUnknown(m)
}

var xxx_messageInfo_HostListData proto.InternalMessageInfo

func (m *HostListData) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *HostListData) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *HostListData) GetETLD() string {
	if m != nil {
		return m.ETLD
	}
	return ""
}

func (m *HostListData) GetHostAddress() string {
	if m != nil {
		return m.HostAddress
	}
	return ""
}

func (m *HostListData) GetIPAddresses() []string {
	if m != nil {
		return m.IPAddresses
	}
	return nil
}

func (m *HostListData) GetAddressIDs() []int64 {
	if m != nil {
		return m.AddressIDs
	}
	return nil
}

type AddressFilter struct {
	OrgID                int32    `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32    `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Start                int64    `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	Limit                int32    `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	WithIgnored          bool     `protobuf:"varint,5,opt,name=WithIgnored,proto3" json:"WithIgnored,omitempty"`
	IgnoredValue         bool     `protobuf:"varint,6,opt,name=IgnoredValue,proto3" json:"IgnoredValue,omitempty"`
	WithLastScannedTime  bool     `protobuf:"varint,7,opt,name=WithLastScannedTime,proto3" json:"WithLastScannedTime,omitempty"`
	SinceScannedTime     int64    `protobuf:"varint,8,opt,name=SinceScannedTime,proto3" json:"SinceScannedTime,omitempty"`
	WithLastSeenTime     bool     `protobuf:"varint,9,opt,name=WithLastSeenTime,proto3" json:"WithLastSeenTime,omitempty"`
	SinceSeenTime        int64    `protobuf:"varint,10,opt,name=SinceSeenTime,proto3" json:"SinceSeenTime,omitempty"`
	WithIsWildcard       bool     `protobuf:"varint,11,opt,name=WithIsWildcard,proto3" json:"WithIsWildcard,omitempty"`
	IsWildcardValue      bool     `protobuf:"varint,12,opt,name=IsWildcardValue,proto3" json:"IsWildcardValue,omitempty"`
	WithIsHostedService  bool     `protobuf:"varint,13,opt,name=WithIsHostedService,proto3" json:"WithIsHostedService,omitempty"`
	IsHostedServiceValue bool     `protobuf:"varint,14,opt,name=IsHostedServiceValue,proto3" json:"IsHostedServiceValue,omitempty"`
	MatchesHost          string   `protobuf:"bytes,15,opt,name=MatchesHost,proto3" json:"MatchesHost,omitempty"`
	MatchesIP            string   `protobuf:"bytes,16,opt,name=MatchesIP,proto3" json:"MatchesIP,omitempty"`
	NSRecord             int32    `protobuf:"varint,17,opt,name=NSRecord,proto3" json:"NSRecord,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressFilter) Reset()         { *m = AddressFilter{} }
func (m *AddressFilter) String() string { return proto.CompactTextString(m) }
func (*AddressFilter) ProtoMessage()    {}
func (*AddressFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_address_4a5984b31bf47b9f, []int{2}
}
func (m *AddressFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddressFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressFilter.Merge(dst, src)
}
func (m *AddressFilter) XXX_Size() int {
	return m.Size()
}
func (m *AddressFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AddressFilter proto.InternalMessageInfo

func (m *AddressFilter) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *AddressFilter) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *AddressFilter) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *AddressFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AddressFilter) GetWithIgnored() bool {
	if m != nil {
		return m.WithIgnored
	}
	return false
}

func (m *AddressFilter) GetIgnoredValue() bool {
	if m != nil {
		return m.IgnoredValue
	}
	return false
}

func (m *AddressFilter) GetWithLastScannedTime() bool {
	if m != nil {
		return m.WithLastScannedTime
	}
	return false
}

func (m *AddressFilter) GetSinceScannedTime() int64 {
	if m != nil {
		return m.SinceScannedTime
	}
	return 0
}

func (m *AddressFilter) GetWithLastSeenTime() bool {
	if m != nil {
		return m.WithLastSeenTime
	}
	return false
}

func (m *AddressFilter) GetSinceSeenTime() int64 {
	if m != nil {
		return m.SinceSeenTime
	}
	return 0
}

func (m *AddressFilter) GetWithIsWildcard() bool {
	if m != nil {
		return m.WithIsWildcard
	}
	return false
}

func (m *AddressFilter) GetIsWildcardValue() bool {
	if m != nil {
		return m.IsWildcardValue
	}
	return false
}

func (m *AddressFilter) GetWithIsHostedService() bool {
	if m != nil {
		return m.WithIsHostedService
	}
	return false
}

func (m *AddressFilter) GetIsHostedServiceValue() bool {
	if m != nil {
		return m.IsHostedServiceValue
	}
	return false
}

func (m *AddressFilter) GetMatchesHost() string {
	if m != nil {
		return m.MatchesHost
	}
	return ""
}

func (m *AddressFilter) GetMatchesIP() string {
	if m != nil {
		return m.MatchesIP
	}
	return ""
}

func (m *AddressFilter) GetNSRecord() int32 {
	if m != nil {
		return m.NSRecord
	}
	return 0
}

func init() {
	proto.RegisterType((*AddressData)(nil), "AddressData")
	proto.RegisterType((*HostListData)(nil), "HostListData")
	proto.RegisterType((*AddressFilter)(nil), "AddressFilter")
}
func (m *AddressData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.OrgID))
	}
	if m.AddressID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.AddressID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.GroupID))
	}
	if len(m.HostAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAddress(dAtA, i, uint64(len(m.HostAddress)))
		i += copy(dAtA[i:], m.HostAddress)
	}
	if len(m.IPAddress) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAddress(dAtA, i, uint64(len(m.IPAddress)))
		i += copy(dAtA[i:], m.IPAddress)
	}
	if m.DiscoveryTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.DiscoveryTime))
	}
	if len(m.DiscoveredBy) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAddress(dAtA, i, uint64(len(m.DiscoveredBy)))
		i += copy(dAtA[i:], m.DiscoveredBy)
	}
	if m.LastScannedTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.LastScannedTime))
	}
	if m.LastSeenTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.LastSeenTime))
	}
	if m.ConfidenceScore != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ConfidenceScore))))
		i += 4
	}
	if m.UserConfidenceScore != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UserConfidenceScore))))
		i += 4
	}
	if m.IsSOA {
		dAtA[i] = 0x60
		i++
		if m.IsSOA {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsWildcardZone {
		dAtA[i] = 0x68
		i++
		if m.IsWildcardZone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsHostedService {
		dAtA[i] = 0x70
		i++
		if m.IsHostedService {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ignored {
		dAtA[i] = 0x78
		i++
		if m.Ignored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Deleted {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.FoundFrom) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAddress(dAtA, i, uint64(len(m.FoundFrom)))
		i += copy(dAtA[i:], m.FoundFrom)
	}
	if m.NSRecord != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.NSRecord))
	}
	if len(m.AddressHash) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAddress(dAtA, i, uint64(len(m.AddressHash)))
		i += copy(dAtA[i:], m.AddressHash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HostListData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostListData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.GroupID))
	}
	if len(m.ETLD) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAddress(dAtA, i, uint64(len(m.ETLD)))
		i += copy(dAtA[i:], m.ETLD)
	}
	if len(m.HostAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAddress(dAtA, i, uint64(len(m.HostAddress)))
		i += copy(dAtA[i:], m.HostAddress)
	}
	if len(m.IPAddresses) > 0 {
		for _, s := range m.IPAddresses {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AddressIDs) > 0 {
		dAtA2 := make([]byte, len(m.AddressIDs)*10)
		var j1 int
		for _, num1 := range m.AddressIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintAddress(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddressFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.GroupID))
	}
	if m.Start != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.Start))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.Limit))
	}
	if m.WithIgnored {
		dAtA[i] = 0x28
		i++
		if m.WithIgnored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IgnoredValue {
		dAtA[i] = 0x30
		i++
		if m.IgnoredValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WithLastScannedTime {
		dAtA[i] = 0x38
		i++
		if m.WithLastScannedTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SinceScannedTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.SinceScannedTime))
	}
	if m.WithLastSeenTime {
		dAtA[i] = 0x48
		i++
		if m.WithLastSeenTime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SinceSeenTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.SinceSeenTime))
	}
	if m.WithIsWildcard {
		dAtA[i] = 0x58
		i++
		if m.WithIsWildcard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsWildcardValue {
		dAtA[i] = 0x60
		i++
		if m.IsWildcardValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WithIsHostedService {
		dAtA[i] = 0x68
		i++
		if m.WithIsHostedService {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsHostedServiceValue {
		dAtA[i] = 0x70
		i++
		if m.IsHostedServiceValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.MatchesHost) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAddress(dAtA, i, uint64(len(m.MatchesHost)))
		i += copy(dAtA[i:], m.MatchesHost)
	}
	if len(m.MatchesIP) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAddress(dAtA, i, uint64(len(m.MatchesIP)))
		i += copy(dAtA[i:], m.MatchesIP)
	}
	if m.NSRecord != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAddress(dAtA, i, uint64(m.NSRecord))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAddress(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AddressData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddress(uint64(m.OrgID))
	}
	if m.AddressID != 0 {
		n += 1 + sovAddress(uint64(m.AddressID))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddress(uint64(m.GroupID))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovAddress(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovAddress(uint64(l))
	}
	if m.DiscoveryTime != 0 {
		n += 1 + sovAddress(uint64(m.DiscoveryTime))
	}
	l = len(m.DiscoveredBy)
	if l > 0 {
		n += 1 + l + sovAddress(uint64(l))
	}
	if m.LastScannedTime != 0 {
		n += 1 + sovAddress(uint64(m.LastScannedTime))
	}
	if m.LastSeenTime != 0 {
		n += 1 + sovAddress(uint64(m.LastSeenTime))
	}
	if m.ConfidenceScore != 0 {
		n += 5
	}
	if m.UserConfidenceScore != 0 {
		n += 5
	}
	if m.IsSOA {
		n += 2
	}
	if m.IsWildcardZone {
		n += 2
	}
	if m.IsHostedService {
		n += 2
	}
	if m.Ignored {
		n += 2
	}
	if m.Deleted {
		n += 3
	}
	l = len(m.FoundFrom)
	if l > 0 {
		n += 2 + l + sovAddress(uint64(l))
	}
	if m.NSRecord != 0 {
		n += 2 + sovAddress(uint64(m.NSRecord))
	}
	l = len(m.AddressHash)
	if l > 0 {
		n += 2 + l + sovAddress(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostListData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddress(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddress(uint64(m.GroupID))
	}
	l = len(m.ETLD)
	if l > 0 {
		n += 1 + l + sovAddress(uint64(l))
	}
	l = len(m.HostAddress)
	if l > 0 {
		n += 1 + l + sovAddress(uint64(l))
	}
	if len(m.IPAddresses) > 0 {
		for _, s := range m.IPAddresses {
			l = len(s)
			n += 1 + l + sovAddress(uint64(l))
		}
	}
	if len(m.AddressIDs) > 0 {
		l = 0
		for _, e := range m.AddressIDs {
			l += sovAddress(uint64(e))
		}
		n += 1 + sovAddress(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddressFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddress(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddress(uint64(m.GroupID))
	}
	if m.Start != 0 {
		n += 1 + sovAddress(uint64(m.Start))
	}
	if m.Limit != 0 {
		n += 1 + sovAddress(uint64(m.Limit))
	}
	if m.WithIgnored {
		n += 2
	}
	if m.IgnoredValue {
		n += 2
	}
	if m.WithLastScannedTime {
		n += 2
	}
	if m.SinceScannedTime != 0 {
		n += 1 + sovAddress(uint64(m.SinceScannedTime))
	}
	if m.WithLastSeenTime {
		n += 2
	}
	if m.SinceSeenTime != 0 {
		n += 1 + sovAddress(uint64(m.SinceSeenTime))
	}
	if m.WithIsWildcard {
		n += 2
	}
	if m.IsWildcardValue {
		n += 2
	}
	if m.WithIsHostedService {
		n += 2
	}
	if m.IsHostedServiceValue {
		n += 2
	}
	l = len(m.MatchesHost)
	if l > 0 {
		n += 1 + l + sovAddress(uint64(l))
	}
	l = len(m.MatchesIP)
	if l > 0 {
		n += 2 + l + sovAddress(uint64(l))
	}
	if m.NSRecord != 0 {
		n += 2 + sovAddress(uint64(m.NSRecord))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAddress(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAddress(x uint64) (n int) {
	return sovAddress(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddressData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressID", wireType)
			}
			m.AddressID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddressID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryTime", wireType)
			}
			m.DiscoveryTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscoveryTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveredBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoveredBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastScannedTime", wireType)
			}
			m.LastScannedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastScannedTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenTime", wireType)
			}
			m.LastSeenTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeenTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfidenceScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ConfidenceScore = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserConfidenceScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.UserConfidenceScore = float32(math.Float32frombits(v))
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSOA", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSOA = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWildcardZone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWildcardZone = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHostedService", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHostedService = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ignored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ignored = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoundFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FoundFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NSRecord", wireType)
			}
			m.NSRecord = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NSRecord |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostListData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostListData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostListData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETLD", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ETLD = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddresses = append(m.IPAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAddress
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AddressIDs = append(m.AddressIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAddress
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAddress
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AddressIDs) == 0 {
					m.AddressIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAddress
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AddressIDs = append(m.AddressIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIgnored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithIgnored = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoredValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnoredValue = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithLastScannedTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithLastScannedTime = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SinceScannedTime", wireType)
			}
			m.SinceScannedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SinceScannedTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithLastSeenTime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithLastSeenTime = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SinceSeenTime", wireType)
			}
			m.SinceSeenTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SinceSeenTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIsWildcard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithIsWildcard = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWildcardValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWildcardValue = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithIsHostedService", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithIsHostedService = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHostedServiceValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHostedServiceValue = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchesHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchesHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchesIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddress
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchesIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NSRecord", wireType)
			}
			m.NSRecord = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NSRecord |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAddress(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAddress
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAddress
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAddress
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAddress(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAddress = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAddress   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("prototypes/address.proto", fileDescriptor_address_4a5984b31bf47b9f) }

var fileDescriptor_address_4a5984b31bf47b9f = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0xc7, 0x7f, 0x59, 0x97, 0xad, 0x75, 0xdb, 0xfd, 0xf1, 0x76, 0x61, 0xfd, 0x84, 0xaa, 0xa8,
	0x42, 0x28, 0x42, 0x62, 0xe5, 0xcf, 0x13, 0x6c, 0x2b, 0x63, 0x91, 0x0a, 0x9b, 0x9c, 0xc1, 0xa4,
	0xdd, 0x65, 0xb1, 0x59, 0x2d, 0xda, 0x78, 0xb2, 0xdd, 0x49, 0x7b, 0x02, 0x5e, 0x81, 0x27, 0xe1,
	0x19, 0xb8, 0xe4, 0x11, 0xd0, 0x78, 0x06, 0xee, 0x91, 0x8f, 0x93, 0x34, 0xc9, 0x26, 0x04, 0x77,
	0x39, 0x9f, 0x73, 0x7c, 0x72, 0xe2, 0xf3, 0xfd, 0xb6, 0x88, 0x5c, 0x2b, 0x69, 0xa4, 0xb9, 0xbd,
	0xe6, 0x7a, 0x94, 0x30, 0xa6, 0xb8, 0xd6, 0x7b, 0x80, 0x86, 0x9f, 0x7d, 0xd4, 0xdd, 0x77, 0x64,
	0x9c, 0x98, 0x04, 0xef, 0x22, 0xff, 0x44, 0x5d, 0x45, 0x63, 0xe2, 0x05, 0x5e, 0xe8, 0x53, 0x17,
	0xe0, 0x47, 0xa8, 0x93, 0x17, 0x45, 0x63, 0xb2, 0x12, 0x78, 0x61, 0x8b, 0x2e, 0x01, 0x26, 0x68,
	0xfd, 0x8d, 0x92, 0x8b, 0xeb, 0x68, 0x4c, 0x5a, 0x70, 0xaa, 0x08, 0x71, 0x80, 0xba, 0xc7, 0x52,
	0x9b, 0xbc, 0x94, 0xac, 0x06, 0x5e, 0xd8, 0xa1, 0x55, 0x64, 0x3b, 0x47, 0xa7, 0x45, 0xde, 0x87,
	0xfc, 0x12, 0xe0, 0xc7, 0xa8, 0x3f, 0x16, 0x3a, 0x95, 0x37, 0x5c, 0xdd, 0x9e, 0x89, 0x39, 0x27,
	0x6b, 0xf0, 0xee, 0x3a, 0xc4, 0x43, 0xd4, 0x2b, 0x00, 0x67, 0x07, 0xb7, 0x64, 0x1d, 0xda, 0xd4,
	0x18, 0x0e, 0xd1, 0xe6, 0x24, 0xd1, 0x26, 0x4e, 0x93, 0x2c, 0xe3, 0x0c, 0x7a, 0xb5, 0xa1, 0x57,
	0x13, 0xdb, 0x6e, 0x80, 0x38, 0xcf, 0xa0, 0xac, 0x03, 0x65, 0x35, 0x66, 0xbb, 0x1d, 0xca, 0xec,
	0xa3, 0x60, 0x3c, 0x4b, 0x79, 0x9c, 0x4a, 0xc5, 0x09, 0x0a, 0xbc, 0x70, 0x85, 0x36, 0x31, 0x7e,
	0x8e, 0x76, 0xde, 0x6b, 0xae, 0x9a, 0xd5, 0x5d, 0xa8, 0x7e, 0x28, 0x65, 0x37, 0x10, 0xe9, 0xf8,
	0x64, 0x9f, 0xf4, 0x02, 0x2f, 0x6c, 0x53, 0x17, 0xe0, 0x27, 0x68, 0x23, 0xd2, 0xe7, 0x62, 0xc6,
	0xd2, 0x44, 0xb1, 0x0b, 0x99, 0x71, 0xd2, 0x87, 0x74, 0x83, 0xda, 0xc9, 0x22, 0x6d, 0x2f, 0x98,
	0xb3, 0x98, 0xab, 0x1b, 0x91, 0x72, 0xb2, 0x01, 0x85, 0x4d, 0x6c, 0xb7, 0x16, 0x5d, 0x65, 0x52,
	0x71, 0x46, 0x36, 0xa1, 0xa2, 0x08, 0x6d, 0x66, 0xcc, 0x67, 0xdc, 0x70, 0x46, 0xb6, 0x5c, 0x26,
	0x0f, 0xed, 0xb6, 0x8e, 0xe4, 0x22, 0x63, 0x47, 0x4a, 0xce, 0xc9, 0xb6, 0xdb, 0x56, 0x09, 0xf0,
	0xff, 0xa8, 0xfd, 0x2e, 0xa6, 0x3c, 0x95, 0x8a, 0x11, 0x0c, 0x42, 0x28, 0x63, 0xab, 0x84, 0x7c,
	0xa9, 0xc7, 0x89, 0x9e, 0x92, 0x1d, 0xa7, 0x84, 0x0a, 0x1a, 0x7e, 0xf5, 0x50, 0xcf, 0x4e, 0x38,
	0x11, 0xda, 0xfc, 0x41, 0x8a, 0x15, 0xb1, 0xad, 0xd4, 0xc5, 0x86, 0xd1, 0xea, 0xeb, 0xb3, 0x89,
	0xd3, 0x60, 0x87, 0xc2, 0xf3, 0x5f, 0x08, 0x30, 0x40, 0xdd, 0x52, 0x6f, 0xdc, 0x4a, 0xb0, 0x65,
	0x2b, 0x2a, 0x08, 0x0f, 0x10, 0x2a, 0xb5, 0xae, 0xc9, 0x5a, 0xd0, 0x0a, 0x5b, 0xb4, 0x42, 0x86,
	0xbf, 0x56, 0x51, 0x3f, 0x0f, 0x8f, 0xc4, 0xcc, 0x70, 0xf5, 0xcf, 0x93, 0xef, 0x22, 0x3f, 0x36,
	0x89, 0x32, 0x30, 0x7a, 0x8b, 0xba, 0xc0, 0xd2, 0x89, 0x98, 0x0b, 0x03, 0x53, 0xfb, 0xd4, 0x05,
	0x76, 0xde, 0x73, 0x61, 0xa6, 0xc5, 0xea, 0x7c, 0x58, 0x50, 0x15, 0x59, 0x01, 0xe7, 0x8f, 0x1f,
	0x92, 0xd9, 0xc2, 0x79, 0xa6, 0x4d, 0x6b, 0xcc, 0xca, 0xd2, 0x1e, 0x69, 0x5a, 0x62, 0x1d, 0x4a,
	0x1f, 0x4a, 0xe1, 0xa7, 0x68, 0x2b, 0x16, 0x20, 0xd2, 0xa6, 0x83, 0xee, 0x71, 0x5b, 0x5b, 0xb6,
	0xa8, 0xda, 0xa8, 0x4d, 0xef, 0x71, 0x6b, 0x71, 0x77, 0xbe, 0x28, 0x44, 0xce, 0xe2, 0x35, 0x68,
	0xe5, 0x0f, 0x9f, 0x58, 0x8a, 0x1d, 0x1c, 0xd4, 0xa6, 0x0d, 0xea, 0xe4, 0x5f, 0x44, 0xee, 0xf3,
	0x7b, 0x85, 0xfc, 0x6b, 0xb8, 0xb8, 0x81, 0xa6, 0x59, 0xfa, 0xcb, 0x1b, 0x68, 0x1a, 0xe6, 0x25,
	0xda, 0x6d, 0x20, 0xf7, 0x02, 0xe7, 0xaf, 0x07, 0x73, 0x76, 0x5b, 0x6f, 0x13, 0x93, 0x4e, 0x39,
	0x24, 0xc1, 0x68, 0x1d, 0x5a, 0x45, 0xd6, 0x52, 0x79, 0x18, 0x9d, 0x82, 0xdd, 0x3a, 0x74, 0x09,
	0x6a, 0x96, 0xda, 0xae, 0x5b, 0xea, 0xe0, 0xf0, 0xdb, 0xdd, 0xc0, 0xfb, 0x7e, 0x37, 0xf0, 0x7e,
	0xdc, 0x0d, 0xbc, 0x2f, 0x3f, 0x07, 0xff, 0x5d, 0xbc, 0xb8, 0x12, 0x66, 0xba, 0xb8, 0xdc, 0x4b,
	0xe5, 0x7c, 0x34, 0x13, 0xd9, 0xa7, 0x44, 0x3c, 0x13, 0x72, 0x94, 0xcc, 0x47, 0xf0, 0x5b, 0x9f,
	0x6a, 0x37, 0x99, 0x1e, 0x2d, 0xff, 0x0d, 0x2e, 0xd7, 0xe0, 0xf9, 0xd5, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xba, 0xce, 0xfb, 0xc3, 0x22, 0x06, 0x00, 0x00,
}
