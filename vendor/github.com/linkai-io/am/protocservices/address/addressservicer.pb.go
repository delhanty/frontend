// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: address/addressservicer.proto

package address // import "github.com/linkai-io/am/protocservices/address"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import prototypes "github.com/linkai-io/am/protocservices/prototypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddressesRequest struct {
	UserContext          *prototypes.UserContext   `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Filter               *prototypes.AddressFilter `protobuf:"bytes,2,opt,name=Filter" json:"Filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *AddressesRequest) Reset()         { *m = AddressesRequest{} }
func (m *AddressesRequest) String() string { return proto.CompactTextString(m) }
func (*AddressesRequest) ProtoMessage()    {}
func (*AddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_addressservicer_d7187f7faf4766fd, []int{0}
}
func (m *AddressesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddressesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressesRequest.Merge(dst, src)
}
func (m *AddressesRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddressesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddressesRequest proto.InternalMessageInfo

func (m *AddressesRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *AddressesRequest) GetFilter() *prototypes.AddressFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type AddressesResponse struct {
	OrgID                int32                   `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	Addresses            *prototypes.AddressData `protobuf:"bytes,2,opt,name=Addresses" json:"Addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AddressesResponse) Reset()         { *m = AddressesResponse{} }
func (m *AddressesResponse) String() string { return proto.CompactTextString(m) }
func (*AddressesResponse) ProtoMessage()    {}
func (*AddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_addressservicer_d7187f7faf4766fd, []int{1}
}
func (m *AddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressesResponse.Merge(dst, src)
}
func (m *AddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddressesResponse proto.InternalMessageInfo

func (m *AddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *AddressesResponse) GetAddresses() *prototypes.AddressData {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type CountAddressesRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID              int32                   `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CountAddressesRequest) Reset()         { *m = CountAddressesRequest{} }
func (m *CountAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*CountAddressesRequest) ProtoMessage()    {}
func (*CountAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_addressservicer_d7187f7faf4766fd, []int{2}
}
func (m *CountAddressesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountAddressesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountAddressesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CountAddressesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountAddressesRequest.Merge(dst, src)
}
func (m *CountAddressesRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountAddressesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountAddressesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountAddressesRequest proto.InternalMessageInfo

func (m *CountAddressesRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *CountAddressesRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

type CountAddressesResponse struct {
	OrgID                int32    `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	GroupID              int32    `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Count                int32    `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountAddressesResponse) Reset()         { *m = CountAddressesResponse{} }
func (m *CountAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*CountAddressesResponse) ProtoMessage()    {}
func (*CountAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_addressservicer_d7187f7faf4766fd, []int{3}
}
func (m *CountAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CountAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountAddressesResponse.Merge(dst, src)
}
func (m *CountAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountAddressesResponse proto.InternalMessageInfo

func (m *CountAddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *CountAddressesResponse) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *CountAddressesResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type UpdateAddressRequest struct {
	UserContext          *prototypes.UserContext            `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Address              map[string]*prototypes.AddressData `protobuf:"bytes,2,rep,name=Address" json:"Address,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *UpdateAddressRequest) Reset()         { *m = UpdateAddressRequest{} }
func (m *UpdateAddressRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAddressRequest) ProtoMessage()    {}
func (*UpdateAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_addressservicer_d7187f7faf4766fd, []int{4}
}
func (m *UpdateAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAddressRequest.Merge(dst, src)
}
func (m *UpdateAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAddressRequest proto.InternalMessageInfo

func (m *UpdateAddressRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *UpdateAddressRequest) GetAddress() map[string]*prototypes.AddressData {
	if m != nil {
		return m.Address
	}
	return nil
}

type UpdateAddressesResponse struct {
	OrgID                int32    `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAddressesResponse) Reset()         { *m = UpdateAddressesResponse{} }
func (m *UpdateAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateAddressesResponse) ProtoMessage()    {}
func (*UpdateAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_addressservicer_d7187f7faf4766fd, []int{5}
}
func (m *UpdateAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAddressesResponse.Merge(dst, src)
}
func (m *UpdateAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAddressesResponse proto.InternalMessageInfo

func (m *UpdateAddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *UpdateAddressesResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DeleteAddressesRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID              int32                   `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	AddressIDs           []int64                 `protobuf:"varint,3,rep,packed,name=AddressIDs" json:"AddressIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DeleteAddressesRequest) Reset()         { *m = DeleteAddressesRequest{} }
func (m *DeleteAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAddressesRequest) ProtoMessage()    {}
func (*DeleteAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_addressservicer_d7187f7faf4766fd, []int{6}
}
func (m *DeleteAddressesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAddressesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAddressesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteAddressesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAddressesRequest.Merge(dst, src)
}
func (m *DeleteAddressesRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAddressesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAddressesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAddressesRequest proto.InternalMessageInfo

func (m *DeleteAddressesRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *DeleteAddressesRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *DeleteAddressesRequest) GetAddressIDs() []int64 {
	if m != nil {
		return m.AddressIDs
	}
	return nil
}

type DeleteAddressesResponse struct {
	OrgID                int32    `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAddressesResponse) Reset()         { *m = DeleteAddressesResponse{} }
func (m *DeleteAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAddressesResponse) ProtoMessage()    {}
func (*DeleteAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_addressservicer_d7187f7faf4766fd, []int{7}
}
func (m *DeleteAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAddressesResponse.Merge(dst, src)
}
func (m *DeleteAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAddressesResponse proto.InternalMessageInfo

func (m *DeleteAddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

type IgnoreAddressesRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID              int32                   `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	AddressIDs           []int64                 `protobuf:"varint,3,rep,packed,name=AddressIDs" json:"AddressIDs,omitempty"`
	IgnoreValue          bool                    `protobuf:"varint,4,opt,name=IgnoreValue,proto3" json:"IgnoreValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *IgnoreAddressesRequest) Reset()         { *m = IgnoreAddressesRequest{} }
func (m *IgnoreAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*IgnoreAddressesRequest) ProtoMessage()    {}
func (*IgnoreAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_addressservicer_d7187f7faf4766fd, []int{8}
}
func (m *IgnoreAddressesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IgnoreAddressesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IgnoreAddressesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IgnoreAddressesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IgnoreAddressesRequest.Merge(dst, src)
}
func (m *IgnoreAddressesRequest) XXX_Size() int {
	return m.Size()
}
func (m *IgnoreAddressesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IgnoreAddressesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IgnoreAddressesRequest proto.InternalMessageInfo

func (m *IgnoreAddressesRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *IgnoreAddressesRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *IgnoreAddressesRequest) GetAddressIDs() []int64 {
	if m != nil {
		return m.AddressIDs
	}
	return nil
}

func (m *IgnoreAddressesRequest) GetIgnoreValue() bool {
	if m != nil {
		return m.IgnoreValue
	}
	return false
}

type IgnoreAddressesResponse struct {
	OrgID                int32    `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IgnoreAddressesResponse) Reset()         { *m = IgnoreAddressesResponse{} }
func (m *IgnoreAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*IgnoreAddressesResponse) ProtoMessage()    {}
func (*IgnoreAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_addressservicer_d7187f7faf4766fd, []int{9}
}
func (m *IgnoreAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IgnoreAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IgnoreAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IgnoreAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IgnoreAddressesResponse.Merge(dst, src)
}
func (m *IgnoreAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *IgnoreAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IgnoreAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IgnoreAddressesResponse proto.InternalMessageInfo

func (m *IgnoreAddressesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func init() {
	proto.RegisterType((*AddressesRequest)(nil), "address.AddressesRequest")
	proto.RegisterType((*AddressesResponse)(nil), "address.AddressesResponse")
	proto.RegisterType((*CountAddressesRequest)(nil), "address.CountAddressesRequest")
	proto.RegisterType((*CountAddressesResponse)(nil), "address.CountAddressesResponse")
	proto.RegisterType((*UpdateAddressRequest)(nil), "address.UpdateAddressRequest")
	proto.RegisterMapType((map[string]*prototypes.AddressData)(nil), "address.UpdateAddressRequest.AddressEntry")
	proto.RegisterType((*UpdateAddressesResponse)(nil), "address.UpdateAddressesResponse")
	proto.RegisterType((*DeleteAddressesRequest)(nil), "address.DeleteAddressesRequest")
	proto.RegisterType((*DeleteAddressesResponse)(nil), "address.DeleteAddressesResponse")
	proto.RegisterType((*IgnoreAddressesRequest)(nil), "address.IgnoreAddressesRequest")
	proto.RegisterType((*IgnoreAddressesResponse)(nil), "address.IgnoreAddressesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AddressClient is the client API for Address service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AddressClient interface {
	Get(ctx context.Context, in *AddressesRequest, opts ...grpc.CallOption) (Address_GetClient, error)
	Update(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressesResponse, error)
	Delete(ctx context.Context, in *DeleteAddressesRequest, opts ...grpc.CallOption) (*DeleteAddressesResponse, error)
	Ignore(ctx context.Context, in *IgnoreAddressesRequest, opts ...grpc.CallOption) (*IgnoreAddressesResponse, error)
	Count(ctx context.Context, in *CountAddressesRequest, opts ...grpc.CallOption) (*CountAddressesResponse, error)
}

type addressClient struct {
	cc *grpc.ClientConn
}

func NewAddressClient(cc *grpc.ClientConn) AddressClient {
	return &addressClient{cc}
}

func (c *addressClient) Get(ctx context.Context, in *AddressesRequest, opts ...grpc.CallOption) (Address_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Address_serviceDesc.Streams[0], "/address.Address/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &addressGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Address_GetClient interface {
	Recv() (*AddressesResponse, error)
	grpc.ClientStream
}

type addressGetClient struct {
	grpc.ClientStream
}

func (x *addressGetClient) Recv() (*AddressesResponse, error) {
	m := new(AddressesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *addressClient) Update(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressesResponse, error) {
	out := new(UpdateAddressesResponse)
	err := c.cc.Invoke(ctx, "/address.Address/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) Delete(ctx context.Context, in *DeleteAddressesRequest, opts ...grpc.CallOption) (*DeleteAddressesResponse, error) {
	out := new(DeleteAddressesResponse)
	err := c.cc.Invoke(ctx, "/address.Address/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) Ignore(ctx context.Context, in *IgnoreAddressesRequest, opts ...grpc.CallOption) (*IgnoreAddressesResponse, error) {
	out := new(IgnoreAddressesResponse)
	err := c.cc.Invoke(ctx, "/address.Address/Ignore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressClient) Count(ctx context.Context, in *CountAddressesRequest, opts ...grpc.CallOption) (*CountAddressesResponse, error) {
	out := new(CountAddressesResponse)
	err := c.cc.Invoke(ctx, "/address.Address/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServer is the server API for Address service.
type AddressServer interface {
	Get(*AddressesRequest, Address_GetServer) error
	Update(context.Context, *UpdateAddressRequest) (*UpdateAddressesResponse, error)
	Delete(context.Context, *DeleteAddressesRequest) (*DeleteAddressesResponse, error)
	Ignore(context.Context, *IgnoreAddressesRequest) (*IgnoreAddressesResponse, error)
	Count(context.Context, *CountAddressesRequest) (*CountAddressesResponse, error)
}

func RegisterAddressServer(s *grpc.Server, srv AddressServer) {
	s.RegisterService(&_Address_serviceDesc, srv)
}

func _Address_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AddressesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AddressServer).Get(m, &addressGetServer{stream})
}

type Address_GetServer interface {
	Send(*AddressesResponse) error
	grpc.ServerStream
}

type addressGetServer struct {
	grpc.ServerStream
}

func (x *addressGetServer) Send(m *AddressesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Address_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.Address/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).Update(ctx, req.(*UpdateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.Address/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).Delete(ctx, req.(*DeleteAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_Ignore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IgnoreAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).Ignore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.Address/Ignore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).Ignore(ctx, req.(*IgnoreAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Address_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.Address/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).Count(ctx, req.(*CountAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Address_serviceDesc = grpc.ServiceDesc{
	ServiceName: "address.Address",
	HandlerType: (*AddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Address_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Address_Delete_Handler,
		},
		{
			MethodName: "Ignore",
			Handler:    _Address_Ignore_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Address_Count_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Address_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "address/addressservicer.proto",
}

func (m *AddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n1, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Filter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Filter.Size()))
		n2, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.Addresses != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Addresses.Size()))
		n3, err := m.Addresses.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CountAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n4, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.GroupID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CountAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.GroupID))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n5, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Address) > 0 {
		for k, _ := range m.Address {
			dAtA[i] = 0x12
			i++
			v := m.Address[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovAddressservicer(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovAddressservicer(uint64(len(k))) + msgSize
			i = encodeVarintAddressservicer(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAddressservicer(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintAddressservicer(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n7, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.GroupID))
	}
	if len(m.AddressIDs) > 0 {
		dAtA9 := make([]byte, len(m.AddressIDs)*10)
		var j8 int
		for _, num1 := range m.AddressIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IgnoreAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IgnoreAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.UserContext.Size()))
		n10, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.GroupID))
	}
	if len(m.AddressIDs) > 0 {
		dAtA12 := make([]byte, len(m.AddressIDs)*10)
		var j11 int
		for _, num1 := range m.AddressIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if m.IgnoreValue {
		dAtA[i] = 0x20
		i++
		if m.IgnoreValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IgnoreAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IgnoreAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddressservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAddressservicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AddressesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.Addresses != nil {
		l = m.Addresses.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountAddressesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddressservicer(uint64(m.GroupID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddressservicer(uint64(m.GroupID))
	}
	if m.Count != 0 {
		n += 1 + sovAddressservicer(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if len(m.Address) > 0 {
		for k, v := range m.Address {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAddressservicer(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovAddressservicer(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAddressservicer(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.Count != 0 {
		n += 1 + sovAddressservicer(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAddressesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddressservicer(uint64(m.GroupID))
	}
	if len(m.AddressIDs) > 0 {
		l = 0
		for _, e := range m.AddressIDs {
			l += sovAddressservicer(uint64(e))
		}
		n += 1 + sovAddressservicer(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IgnoreAddressesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovAddressservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovAddressservicer(uint64(m.GroupID))
	}
	if len(m.AddressIDs) > 0 {
		l = 0
		for _, e := range m.AddressIDs {
			l += sovAddressservicer(uint64(e))
		}
		n += 1 + sovAddressservicer(uint64(l)) + l
	}
	if m.IgnoreValue {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IgnoreAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovAddressservicer(uint64(m.OrgID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAddressservicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAddressservicer(x uint64) (n int) {
	return sovAddressservicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &prototypes.AddressFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Addresses == nil {
				m.Addresses = &prototypes.AddressData{}
			}
			if err := m.Addresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = make(map[string]*prototypes.AddressData)
			}
			var mapkey string
			var mapvalue *prototypes.AddressData
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAddressservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAddressservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAddressservicer
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAddressservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAddressservicer
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthAddressservicer
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &prototypes.AddressData{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAddressservicer(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAddressservicer
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Address[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAddressservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AddressIDs = append(m.AddressIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAddressservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAddressservicer
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AddressIDs) == 0 {
					m.AddressIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAddressservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AddressIDs = append(m.AddressIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IgnoreAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IgnoreAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IgnoreAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddressservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAddressservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AddressIDs = append(m.AddressIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAddressservicer
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAddressservicer
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AddressIDs) == 0 {
					m.AddressIDs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAddressservicer
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AddressIDs = append(m.AddressIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressIDs", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnoreValue = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IgnoreAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IgnoreAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IgnoreAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddressservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddressservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAddressservicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAddressservicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddressservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAddressservicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAddressservicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAddressservicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAddressservicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAddressservicer   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("address/addressservicer.proto", fileDescriptor_addressservicer_d7187f7faf4766fd)
}

var fileDescriptor_addressservicer_d7187f7faf4766fd = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0x26, 0xfe, 0x92, 0xd0, 0x9b, 0x08, 0x95, 0x51, 0x9b, 0x1a, 0x4b, 0x75, 0x2d, 0x2f,
	0x50, 0x54, 0x09, 0x1b, 0x85, 0x0d, 0x62, 0x81, 0x80, 0xba, 0xb4, 0x51, 0x17, 0x48, 0x23, 0x85,
	0x05, 0x0b, 0x24, 0x37, 0x19, 0x05, 0xd3, 0xd4, 0x36, 0x33, 0xe3, 0x8a, 0x6c, 0x79, 0x0a, 0x1e,
	0x80, 0x87, 0x61, 0xc9, 0x8a, 0x35, 0x0a, 0x2f, 0xc1, 0x12, 0x65, 0x66, 0x6c, 0xa6, 0xad, 0x13,
	0x24, 0x40, 0x62, 0x95, 0xdc, 0x73, 0x4e, 0xce, 0xfd, 0xd5, 0x04, 0x76, 0xe3, 0xc9, 0x84, 0x51,
	0xce, 0x43, 0xfd, 0xc9, 0x29, 0xbb, 0x48, 0xc6, 0x94, 0x05, 0x39, 0xcb, 0x44, 0x86, 0xdb, 0x1a,
	0x76, 0xb6, 0x65, 0x2c, 0xe6, 0x39, 0xe5, 0x61, 0xc1, 0x4b, 0xde, 0xb1, 0x0d, 0x58, 0x4b, 0x15,
	0xe3, 0xbf, 0x81, 0xcd, 0x27, 0x0a, 0xa0, 0x9c, 0xd0, 0xb7, 0x05, 0xe5, 0x02, 0x07, 0xd0, 0x19,
	0x71, 0xca, 0x0e, 0xb2, 0x54, 0xd0, 0x77, 0xc2, 0x46, 0x1e, 0xea, 0x77, 0x06, 0xdd, 0xc0, 0xc0,
	0x88, 0x29, 0xc0, 0x77, 0xa0, 0xf5, 0x2c, 0x99, 0x09, 0xca, 0xec, 0x86, 0x94, 0xde, 0x0c, 0xb4,
	0xa5, 0x42, 0x89, 0x66, 0xfd, 0x11, 0xdc, 0x32, 0x72, 0xf1, 0x3c, 0x4b, 0x39, 0xc5, 0x5b, 0xd0,
	0x7c, 0xce, 0xa6, 0xc3, 0x48, 0xa6, 0x69, 0x12, 0x15, 0xe0, 0x7d, 0xd8, 0xa8, 0xa4, 0xda, 0xb5,
	0x5b, 0xba, 0x46, 0xb1, 0x88, 0xc9, 0x4f, 0xda, 0x8f, 0x61, 0xfb, 0x20, 0x2b, 0x52, 0xf1, 0xc7,
	0x7d, 0xd8, 0xd0, 0x3e, 0x62, 0x59, 0x91, 0x0f, 0x23, 0x99, 0xb2, 0x49, 0xca, 0xd0, 0x7f, 0x05,
	0xbd, 0xab, 0x29, 0xd6, 0x96, 0xbf, 0xd2, 0x69, 0xa9, 0x97, 0x4e, 0xb6, 0xa5, 0xf4, 0x32, 0xf0,
	0xbf, 0x20, 0xd8, 0x1a, 0xe5, 0x93, 0x58, 0x50, 0x9d, 0xe1, 0x77, 0x5b, 0x88, 0xa0, 0xad, 0x1d,
	0xec, 0x86, 0x67, 0xf5, 0x3b, 0x83, 0xfd, 0xa0, 0xdc, 0x77, 0x9d, 0x7f, 0x39, 0xd2, 0xc3, 0x54,
	0xb0, 0x39, 0x29, 0x7f, 0xea, 0x1c, 0x43, 0xd7, 0x24, 0xf0, 0x26, 0x58, 0x67, 0x74, 0x2e, 0xb3,
	0x6f, 0x90, 0xe5, 0x57, 0xec, 0x43, 0xf3, 0x22, 0x9e, 0x15, 0xb4, 0x76, 0x37, 0x8a, 0x7a, 0xd8,
	0x78, 0x80, 0xfc, 0x43, 0xd8, 0xb9, 0x94, 0xf7, 0x97, 0x93, 0xab, 0xe6, 0xd3, 0x30, 0xe7, 0xf3,
	0x1e, 0x41, 0x2f, 0xa2, 0x33, 0x7a, 0xc9, 0xe7, 0x2f, 0x2f, 0x19, 0xbb, 0x00, 0xda, 0x7d, 0x18,
	0x71, 0xdb, 0xf2, 0xac, 0xbe, 0x45, 0x0c, 0xc4, 0x0f, 0x61, 0xe7, 0x5a, 0x0d, 0xeb, 0x7a, 0xf1,
	0x3f, 0x22, 0xe8, 0x0d, 0xa7, 0x69, 0xc6, 0xfe, 0x61, 0xd5, 0xd8, 0x83, 0x8e, 0xaa, 0xe1, 0x85,
	0xdc, 0xd7, 0xff, 0x1e, 0xea, 0xdf, 0x20, 0x26, 0xb4, 0xec, 0xeb, 0x5a, 0x95, 0xeb, 0xfa, 0x1a,
	0x7c, 0x6f, 0x54, 0x57, 0x86, 0x1f, 0x81, 0x75, 0x44, 0x05, 0xbe, 0x5d, 0x9d, 0xd9, 0xd5, 0x56,
	0x1d, 0xa7, 0x8e, 0x52, 0xfe, 0xf7, 0x10, 0x1e, 0x42, 0x4b, 0x1d, 0x08, 0xde, 0x5d, 0x7b, 0xa9,
	0x8e, 0x57, 0x4f, 0x1b, 0xc5, 0x9e, 0x40, 0x4b, 0xed, 0x07, 0xef, 0x55, 0xda, 0xfa, 0xa3, 0x31,
	0xcc, 0x56, 0x6d, 0xf4, 0x04, 0x5a, 0x6a, 0x28, 0x86, 0x59, 0xfd, 0x2e, 0x0d, 0xb3, 0x55, 0x63,
	0x3c, 0xd6, 0x47, 0x8d, 0xdd, 0x4a, 0x5a, 0xfb, 0x62, 0x39, 0x7b, 0x2b, 0x79, 0xe5, 0xf4, 0xf4,
	0xf1, 0xa7, 0x85, 0x8b, 0x3e, 0x2f, 0x5c, 0xf4, 0x75, 0xe1, 0xa2, 0x0f, 0xdf, 0xdc, 0xff, 0x5e,
	0x06, 0xd3, 0x44, 0xbc, 0x2e, 0x4e, 0x83, 0x71, 0x76, 0x1e, 0xce, 0x92, 0xf4, 0x2c, 0x4e, 0xee,
	0x26, 0x59, 0x18, 0x9f, 0x87, 0xf2, 0x7d, 0x1f, 0xeb, 0x3f, 0x8a, 0xea, 0xd9, 0x3f, 0x6d, 0x49,
	0xfc, 0xfe, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0xb4, 0x9b, 0x0c, 0x52, 0x06, 0x00, 0x00,
}
