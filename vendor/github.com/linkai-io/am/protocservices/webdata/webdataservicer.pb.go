// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: webdata/webdataservicer.proto

package webdata // import "github.com/linkai-io/am/protocservices/webdata"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import prototypes "github.com/linkai-io/am/protocservices/prototypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetSnapshotsRequest struct {
	UserContext          *prototypes.UserContext       `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Filter               *prototypes.WebSnapshotFilter `protobuf:"bytes,2,opt,name=Filter" json:"Filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GetSnapshotsRequest) Reset()         { *m = GetSnapshotsRequest{} }
func (m *GetSnapshotsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSnapshotsRequest) ProtoMessage()    {}
func (*GetSnapshotsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_webdataservicer_4a801fb374e959e8, []int{0}
}
func (m *GetSnapshotsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSnapshotsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSnapshotsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSnapshotsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSnapshotsRequest.Merge(dst, src)
}
func (m *GetSnapshotsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSnapshotsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSnapshotsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSnapshotsRequest proto.InternalMessageInfo

func (m *GetSnapshotsRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *GetSnapshotsRequest) GetFilter() *prototypes.WebSnapshotFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type GetSnapshotsResponse struct {
	OrgID                int32                     `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	Snapshots            []*prototypes.WebSnapshot `protobuf:"bytes,2,rep,name=Snapshots" json:"Snapshots,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetSnapshotsResponse) Reset()         { *m = GetSnapshotsResponse{} }
func (m *GetSnapshotsResponse) String() string { return proto.CompactTextString(m) }
func (*GetSnapshotsResponse) ProtoMessage()    {}
func (*GetSnapshotsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_webdataservicer_4a801fb374e959e8, []int{1}
}
func (m *GetSnapshotsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSnapshotsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSnapshotsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSnapshotsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSnapshotsResponse.Merge(dst, src)
}
func (m *GetSnapshotsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSnapshotsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSnapshotsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSnapshotsResponse proto.InternalMessageInfo

func (m *GetSnapshotsResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *GetSnapshotsResponse) GetSnapshots() []*prototypes.WebSnapshot {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

type GetCertificatesRequest struct {
	UserContext          *prototypes.UserContext          `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Filter               *prototypes.WebCertificateFilter `protobuf:"bytes,2,opt,name=Filter" json:"Filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *GetCertificatesRequest) Reset()         { *m = GetCertificatesRequest{} }
func (m *GetCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*GetCertificatesRequest) ProtoMessage()    {}
func (*GetCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_webdataservicer_4a801fb374e959e8, []int{2}
}
func (m *GetCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCertificatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertificatesRequest.Merge(dst, src)
}
func (m *GetCertificatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertificatesRequest proto.InternalMessageInfo

func (m *GetCertificatesRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *GetCertificatesRequest) GetFilter() *prototypes.WebCertificateFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type GetCertificatesResponse struct {
	OrgID                int32                        `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	Certificates         []*prototypes.WebCertificate `protobuf:"bytes,2,rep,name=Certificates" json:"Certificates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetCertificatesResponse) Reset()         { *m = GetCertificatesResponse{} }
func (m *GetCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*GetCertificatesResponse) ProtoMessage()    {}
func (*GetCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_webdataservicer_4a801fb374e959e8, []int{3}
}
func (m *GetCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCertificatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertificatesResponse.Merge(dst, src)
}
func (m *GetCertificatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertificatesResponse proto.InternalMessageInfo

func (m *GetCertificatesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *GetCertificatesResponse) GetCertificates() []*prototypes.WebCertificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

type GetResponsesRequest struct {
	UserContext          *prototypes.UserContext       `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Filter               *prototypes.WebResponseFilter `protobuf:"bytes,2,opt,name=Filter" json:"Filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GetResponsesRequest) Reset()         { *m = GetResponsesRequest{} }
func (m *GetResponsesRequest) String() string { return proto.CompactTextString(m) }
func (*GetResponsesRequest) ProtoMessage()    {}
func (*GetResponsesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_webdataservicer_4a801fb374e959e8, []int{4}
}
func (m *GetResponsesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponsesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponsesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetResponsesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponsesRequest.Merge(dst, src)
}
func (m *GetResponsesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetResponsesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponsesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponsesRequest proto.InternalMessageInfo

func (m *GetResponsesRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *GetResponsesRequest) GetFilter() *prototypes.WebResponseFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type GetResponsesResponse struct {
	OrgID                int32                      `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	Responses            []*prototypes.HTTPResponse `protobuf:"bytes,2,rep,name=Responses" json:"Responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GetResponsesResponse) Reset()         { *m = GetResponsesResponse{} }
func (m *GetResponsesResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponsesResponse) ProtoMessage()    {}
func (*GetResponsesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_webdataservicer_4a801fb374e959e8, []int{5}
}
func (m *GetResponsesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResponsesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResponsesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetResponsesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResponsesResponse.Merge(dst, src)
}
func (m *GetResponsesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResponsesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResponsesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResponsesResponse proto.InternalMessageInfo

func (m *GetResponsesResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *GetResponsesResponse) GetResponses() []*prototypes.HTTPResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type GetURLListRequest struct {
	UserContext          *prototypes.UserContext       `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Filter               *prototypes.WebResponseFilter `protobuf:"bytes,2,opt,name=Filter" json:"Filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GetURLListRequest) Reset()         { *m = GetURLListRequest{} }
func (m *GetURLListRequest) String() string { return proto.CompactTextString(m) }
func (*GetURLListRequest) ProtoMessage()    {}
func (*GetURLListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_webdataservicer_4a801fb374e959e8, []int{6}
}
func (m *GetURLListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetURLListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetURLListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetURLListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetURLListRequest.Merge(dst, src)
}
func (m *GetURLListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetURLListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetURLListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetURLListRequest proto.InternalMessageInfo

func (m *GetURLListRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *GetURLListRequest) GetFilter() *prototypes.WebResponseFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type GetURLListResponse struct {
	OrgID                int32                         `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	URLList              []*prototypes.URLListResponse `protobuf:"bytes,2,rep,name=URLList" json:"URLList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GetURLListResponse) Reset()         { *m = GetURLListResponse{} }
func (m *GetURLListResponse) String() string { return proto.CompactTextString(m) }
func (*GetURLListResponse) ProtoMessage()    {}
func (*GetURLListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_webdataservicer_4a801fb374e959e8, []int{7}
}
func (m *GetURLListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetURLListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetURLListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetURLListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetURLListResponse.Merge(dst, src)
}
func (m *GetURLListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetURLListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetURLListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetURLListResponse proto.InternalMessageInfo

func (m *GetURLListResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *GetURLListResponse) GetURLList() []*prototypes.URLListResponse {
	if m != nil {
		return m.URLList
	}
	return nil
}

type AddRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	Data                 *prototypes.WebData     `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AddRequest) Reset()         { *m = AddRequest{} }
func (m *AddRequest) String() string { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()    {}
func (*AddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_webdataservicer_4a801fb374e959e8, []int{8}
}
func (m *AddRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRequest.Merge(dst, src)
}
func (m *AddRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRequest proto.InternalMessageInfo

func (m *AddRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *AddRequest) GetData() *prototypes.WebData {
	if m != nil {
		return m.Data
	}
	return nil
}

type AddedResponse struct {
	OrgID                int32    `protobuf:"varint,1,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddedResponse) Reset()         { *m = AddedResponse{} }
func (m *AddedResponse) String() string { return proto.CompactTextString(m) }
func (*AddedResponse) ProtoMessage()    {}
func (*AddedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_webdataservicer_4a801fb374e959e8, []int{9}
}
func (m *AddedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddedResponse.Merge(dst, src)
}
func (m *AddedResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddedResponse proto.InternalMessageInfo

func (m *AddedResponse) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func init() {
	proto.RegisterType((*GetSnapshotsRequest)(nil), "webdata.GetSnapshotsRequest")
	proto.RegisterType((*GetSnapshotsResponse)(nil), "webdata.GetSnapshotsResponse")
	proto.RegisterType((*GetCertificatesRequest)(nil), "webdata.GetCertificatesRequest")
	proto.RegisterType((*GetCertificatesResponse)(nil), "webdata.GetCertificatesResponse")
	proto.RegisterType((*GetResponsesRequest)(nil), "webdata.GetResponsesRequest")
	proto.RegisterType((*GetResponsesResponse)(nil), "webdata.GetResponsesResponse")
	proto.RegisterType((*GetURLListRequest)(nil), "webdata.GetURLListRequest")
	proto.RegisterType((*GetURLListResponse)(nil), "webdata.GetURLListResponse")
	proto.RegisterType((*AddRequest)(nil), "webdata.AddRequest")
	proto.RegisterType((*AddedResponse)(nil), "webdata.AddedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebDataClient is the client API for WebData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebDataClient interface {
	GetSnapshots(ctx context.Context, in *GetSnapshotsRequest, opts ...grpc.CallOption) (*GetSnapshotsResponse, error)
	GetResponses(ctx context.Context, in *GetResponsesRequest, opts ...grpc.CallOption) (*GetResponsesResponse, error)
	GetCertificates(ctx context.Context, in *GetCertificatesRequest, opts ...grpc.CallOption) (*GetCertificatesResponse, error)
	GetURLList(ctx context.Context, in *GetURLListRequest, opts ...grpc.CallOption) (*GetURLListResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddedResponse, error)
}

type webDataClient struct {
	cc *grpc.ClientConn
}

func NewWebDataClient(cc *grpc.ClientConn) WebDataClient {
	return &webDataClient{cc}
}

func (c *webDataClient) GetSnapshots(ctx context.Context, in *GetSnapshotsRequest, opts ...grpc.CallOption) (*GetSnapshotsResponse, error) {
	out := new(GetSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/webdata.WebData/GetSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webDataClient) GetResponses(ctx context.Context, in *GetResponsesRequest, opts ...grpc.CallOption) (*GetResponsesResponse, error) {
	out := new(GetResponsesResponse)
	err := c.cc.Invoke(ctx, "/webdata.WebData/GetResponses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webDataClient) GetCertificates(ctx context.Context, in *GetCertificatesRequest, opts ...grpc.CallOption) (*GetCertificatesResponse, error) {
	out := new(GetCertificatesResponse)
	err := c.cc.Invoke(ctx, "/webdata.WebData/GetCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webDataClient) GetURLList(ctx context.Context, in *GetURLListRequest, opts ...grpc.CallOption) (*GetURLListResponse, error) {
	out := new(GetURLListResponse)
	err := c.cc.Invoke(ctx, "/webdata.WebData/GetURLList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webDataClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddedResponse, error) {
	out := new(AddedResponse)
	err := c.cc.Invoke(ctx, "/webdata.WebData/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebDataServer is the server API for WebData service.
type WebDataServer interface {
	GetSnapshots(context.Context, *GetSnapshotsRequest) (*GetSnapshotsResponse, error)
	GetResponses(context.Context, *GetResponsesRequest) (*GetResponsesResponse, error)
	GetCertificates(context.Context, *GetCertificatesRequest) (*GetCertificatesResponse, error)
	GetURLList(context.Context, *GetURLListRequest) (*GetURLListResponse, error)
	Add(context.Context, *AddRequest) (*AddedResponse, error)
}

func RegisterWebDataServer(s *grpc.Server, srv WebDataServer) {
	s.RegisterService(&_WebData_serviceDesc, srv)
}

func _WebData_GetSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebDataServer).GetSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webdata.WebData/GetSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebDataServer).GetSnapshots(ctx, req.(*GetSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebData_GetResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResponsesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebDataServer).GetResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webdata.WebData/GetResponses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebDataServer).GetResponses(ctx, req.(*GetResponsesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebData_GetCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebDataServer).GetCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webdata.WebData/GetCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebDataServer).GetCertificates(ctx, req.(*GetCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebData_GetURLList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebDataServer).GetURLList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webdata.WebData/GetURLList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebDataServer).GetURLList(ctx, req.(*GetURLListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebData_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebDataServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webdata.WebData/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebDataServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webdata.WebData",
	HandlerType: (*WebDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSnapshots",
			Handler:    _WebData_GetSnapshots_Handler,
		},
		{
			MethodName: "GetResponses",
			Handler:    _WebData_GetResponses_Handler,
		},
		{
			MethodName: "GetCertificates",
			Handler:    _WebData_GetCertificates_Handler,
		},
		{
			MethodName: "GetURLList",
			Handler:    _WebData_GetURLList_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _WebData_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webdata/webdataservicer.proto",
}

func (m *GetSnapshotsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSnapshotsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.UserContext.Size()))
		n1, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Filter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.Filter.Size()))
		n2, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSnapshotsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSnapshotsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.OrgID))
	}
	if len(m.Snapshots) > 0 {
		for _, msg := range m.Snapshots {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWebdataservicer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCertificatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCertificatesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.UserContext.Size()))
		n3, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Filter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.Filter.Size()))
		n4, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCertificatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCertificatesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.OrgID))
	}
	if len(m.Certificates) > 0 {
		for _, msg := range m.Certificates {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWebdataservicer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetResponsesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponsesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.UserContext.Size()))
		n5, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Filter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.Filter.Size()))
		n6, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetResponsesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponsesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.OrgID))
	}
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWebdataservicer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetURLListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetURLListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.UserContext.Size()))
		n7, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Filter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.Filter.Size()))
		n8, err := m.Filter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetURLListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetURLListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.OrgID))
	}
	if len(m.URLList) > 0 {
		for _, msg := range m.URLList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWebdataservicer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.UserContext.Size()))
		n9, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.Data.Size()))
		n10, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrgID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebdataservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintWebdataservicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetSnapshotsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovWebdataservicer(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovWebdataservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSnapshotsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovWebdataservicer(uint64(m.OrgID))
	}
	if len(m.Snapshots) > 0 {
		for _, e := range m.Snapshots {
			l = e.Size()
			n += 1 + l + sovWebdataservicer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCertificatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovWebdataservicer(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovWebdataservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCertificatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovWebdataservicer(uint64(m.OrgID))
	}
	if len(m.Certificates) > 0 {
		for _, e := range m.Certificates {
			l = e.Size()
			n += 1 + l + sovWebdataservicer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetResponsesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovWebdataservicer(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovWebdataservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetResponsesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovWebdataservicer(uint64(m.OrgID))
	}
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovWebdataservicer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetURLListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovWebdataservicer(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovWebdataservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetURLListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovWebdataservicer(uint64(m.OrgID))
	}
	if len(m.URLList) > 0 {
		for _, e := range m.URLList {
			l = e.Size()
			n += 1 + l + sovWebdataservicer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovWebdataservicer(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovWebdataservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrgID != 0 {
		n += 1 + sovWebdataservicer(uint64(m.OrgID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWebdataservicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWebdataservicer(x uint64) (n int) {
	return sovWebdataservicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetSnapshotsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSnapshotsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSnapshotsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &prototypes.WebSnapshotFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSnapshotsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSnapshotsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSnapshotsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snapshots = append(m.Snapshots, &prototypes.WebSnapshot{})
			if err := m.Snapshots[len(m.Snapshots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCertificatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCertificatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCertificatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &prototypes.WebCertificateFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCertificatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCertificatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCertificatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificates = append(m.Certificates, &prototypes.WebCertificate{})
			if err := m.Certificates[len(m.Certificates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponsesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponsesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponsesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &prototypes.WebResponseFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponsesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponsesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponsesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &prototypes.HTTPResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetURLListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetURLListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetURLListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &prototypes.WebResponseFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetURLListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetURLListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetURLListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URLList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URLList = append(m.URLList, &prototypes.URLListResponse{})
			if err := m.URLList[len(m.URLList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &prototypes.WebData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebdataservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebdataservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebdataservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebdataservicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebdataservicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebdataservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWebdataservicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWebdataservicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWebdataservicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWebdataservicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebdataservicer   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("webdata/webdataservicer.proto", fileDescriptor_webdataservicer_4a801fb374e959e8)
}

var fileDescriptor_webdataservicer_4a801fb374e959e8 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xed, 0x4e, 0x13, 0x41,
	0x14, 0x75, 0x8b, 0x50, 0xb9, 0x94, 0xa0, 0x43, 0xc1, 0x66, 0x85, 0xda, 0x6c, 0x62, 0x62, 0x30,
	0xcc, 0x26, 0xe5, 0x05, 0xac, 0xa0, 0xd5, 0x48, 0xa2, 0x19, 0x8b, 0x1f, 0xfc, 0xdb, 0xed, 0x5c,
	0x61, 0x22, 0x74, 0xcb, 0xce, 0xad, 0xd5, 0x37, 0xf1, 0x91, 0xfc, 0xe9, 0x23, 0x98, 0xfa, 0x0a,
	0x3e, 0x80, 0xe9, 0x76, 0xb6, 0x3b, 0xbb, 0x94, 0x9a, 0x10, 0xe3, 0xaf, 0xcd, 0x9e, 0x7b, 0xe6,
	0x9c, 0x39, 0xb9, 0x73, 0x2f, 0x6c, 0x0f, 0x31, 0x94, 0x01, 0x05, 0xbe, 0xf9, 0x6a, 0x8c, 0x3f,
	0xab, 0x2e, 0xc6, 0xbc, 0x1f, 0x47, 0x14, 0xb1, 0xb2, 0x81, 0xdd, 0x8d, 0xe4, 0x9f, 0xbe, 0xf6,
	0x51, 0xfb, 0x03, 0x9d, 0xd6, 0xdd, 0xaa, 0x05, 0x0f, 0x31, 0x9c, 0xa0, 0xde, 0x05, 0xac, 0xb7,
	0x91, 0xde, 0xf4, 0x82, 0xbe, 0x3e, 0x8d, 0x48, 0x0b, 0xbc, 0x18, 0xa0, 0x26, 0xc6, 0x61, 0xe5,
	0x48, 0x63, 0xbc, 0x1f, 0xf5, 0x08, 0xbf, 0x50, 0xcd, 0x69, 0x38, 0x0f, 0x57, 0x9a, 0x15, 0x6e,
	0x61, 0xc2, 0x26, 0xb0, 0x1d, 0x58, 0x7a, 0xa6, 0xce, 0x08, 0xe3, 0x5a, 0x29, 0xa1, 0x32, 0xfe,
	0x0e, 0xc3, 0x54, 0x75, 0x52, 0x11, 0x86, 0xe1, 0xbd, 0x87, 0x6a, 0xde, 0x52, 0xf7, 0xa3, 0x9e,
	0x46, 0x56, 0x85, 0xc5, 0x57, 0xf1, 0xc9, 0x8b, 0x83, 0xc4, 0x6d, 0x51, 0x4c, 0x7e, 0xd8, 0x0e,
	0x2c, 0x4f, 0xa9, 0xb5, 0x52, 0x63, 0x21, 0xb9, 0x87, 0x25, 0x2e, 0xb2, 0xb2, 0x37, 0x84, 0xcd,
	0x36, 0xd2, 0x3e, 0xc6, 0xa4, 0x3e, 0xaa, 0x6e, 0x40, 0x78, 0xed, 0x3c, 0xbb, 0x85, 0x3c, 0x1b,
	0x63, 0x4b, 0x4b, 0xb8, 0x10, 0x49, 0xc2, 0xdd, 0x4b, 0xc6, 0x73, 0x53, 0xed, 0x41, 0xc5, 0x66,
	0x9b, 0x60, 0x6b, 0x05, 0x17, 0x91, 0x23, 0x99, 0x5e, 0xa5, 0xca, 0xff, 0xb6, 0x57, 0xa9, 0x6a,
	0x21, 0xd8, 0x87, 0xa4, 0x57, 0x96, 0xe5, 0xdc, 0x54, 0x8f, 0x60, 0x79, 0x4a, 0x35, 0x91, 0x56,
	0xf9, 0xf3, 0x4e, 0xe7, 0x75, 0x8a, 0x8a, 0xac, 0xee, 0x45, 0x70, 0xa7, 0x8d, 0x74, 0x24, 0x0e,
	0x0f, 0x95, 0xa6, 0xff, 0x91, 0xe5, 0x2d, 0x30, 0xdb, 0xf0, 0x2f, 0xaf, 0xae, 0x6c, 0x88, 0x26,
	0xc7, 0x6d, 0x5e, 0x38, 0x28, 0x52, 0x82, 0x77, 0x0c, 0xd0, 0x92, 0xf2, 0xba, 0x09, 0xb6, 0xe0,
	0xe6, 0x41, 0x40, 0x81, 0xb9, 0xff, 0xad, 0xf1, 0xfd, 0xc7, 0xff, 0x22, 0x41, 0xbd, 0x07, 0xb0,
	0xda, 0x92, 0x12, 0xe5, 0xfc, 0xeb, 0x36, 0x7f, 0x97, 0xa0, 0x6c, 0x0e, 0xb2, 0x97, 0x50, 0xb1,
	0xc7, 0x8b, 0x6d, 0x71, 0xb3, 0x18, 0xf8, 0x8c, 0x41, 0x77, 0xb7, 0xaf, 0xa8, 0x1a, 0xbb, 0x89,
	0xd8, 0xb4, 0x69, 0x79, 0xb1, 0xe2, 0x4b, 0xcc, 0x8b, 0x5d, 0x7e, 0x34, 0x1d, 0x58, 0x2b, 0x4c,
	0x09, 0xbb, 0x6f, 0x9f, 0x98, 0x31, 0xb8, 0x6e, 0xe3, 0x6a, 0x82, 0x51, 0x7d, 0x0a, 0x90, 0xb5,
	0x95, 0xb9, 0x36, 0x3f, 0xff, 0xb8, 0xdc, 0x7b, 0x33, 0x6b, 0x46, 0xa6, 0x09, 0x0b, 0x2d, 0x29,
	0xd9, 0xfa, 0x94, 0x93, 0xf5, 0xd4, 0xdd, 0xb4, 0xc1, 0xac, 0x19, 0x4f, 0x1e, 0x7f, 0x1f, 0xd5,
	0x9d, 0x1f, 0xa3, 0xba, 0xf3, 0x73, 0x54, 0x77, 0xbe, 0xfd, 0xaa, 0xdf, 0x38, 0xe6, 0x27, 0x8a,
	0x4e, 0x07, 0x21, 0xef, 0x46, 0xe7, 0xfe, 0x99, 0xea, 0x7d, 0x0a, 0xd4, 0xae, 0x8a, 0xfc, 0xe0,
	0xdc, 0x4f, 0xb6, 0x6d, 0xd7, 0xac, 0x6c, 0x9d, 0xae, 0xf0, 0x70, 0x29, 0xc1, 0xf7, 0xfe, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x81, 0x21, 0xbc, 0xbb, 0xdc, 0x05, 0x00, 0x00,
}
