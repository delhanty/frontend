// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coordinator/coordinatorservicer.proto

package coordinator // import "github.com/linkai-io/am/protocservices/coordinator"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import prototypes "github.com/linkai-io/am/protocservices/prototypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StartGroupRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID              int32                   `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	OrgID                int32                   `protobuf:"varint,3,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StartGroupRequest) Reset()         { *m = StartGroupRequest{} }
func (m *StartGroupRequest) String() string { return proto.CompactTextString(m) }
func (*StartGroupRequest) ProtoMessage()    {}
func (*StartGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_coordinatorservicer_66ba6e5c35041122, []int{0}
}
func (m *StartGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StartGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartGroupRequest.Merge(dst, src)
}
func (m *StartGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartGroupRequest proto.InternalMessageInfo

func (m *StartGroupRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *StartGroupRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *StartGroupRequest) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

type GroupStartedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupStartedResponse) Reset()         { *m = GroupStartedResponse{} }
func (m *GroupStartedResponse) String() string { return proto.CompactTextString(m) }
func (*GroupStartedResponse) ProtoMessage()    {}
func (*GroupStartedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_coordinatorservicer_66ba6e5c35041122, []int{1}
}
func (m *GroupStartedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupStartedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupStartedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GroupStartedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupStartedResponse.Merge(dst, src)
}
func (m *GroupStartedResponse) XXX_Size() int {
	return m.Size()
}
func (m *GroupStartedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupStartedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GroupStartedResponse proto.InternalMessageInfo

type StopGroupRequest struct {
	UserContext          *prototypes.UserContext `protobuf:"bytes,1,opt,name=UserContext" json:"UserContext,omitempty"`
	GroupID              int32                   `protobuf:"varint,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	OrgID                int32                   `protobuf:"varint,3,opt,name=OrgID,proto3" json:"OrgID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StopGroupRequest) Reset()         { *m = StopGroupRequest{} }
func (m *StopGroupRequest) String() string { return proto.CompactTextString(m) }
func (*StopGroupRequest) ProtoMessage()    {}
func (*StopGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_coordinatorservicer_66ba6e5c35041122, []int{2}
}
func (m *StopGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StopGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopGroupRequest.Merge(dst, src)
}
func (m *StopGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *StopGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopGroupRequest proto.InternalMessageInfo

func (m *StopGroupRequest) GetUserContext() *prototypes.UserContext {
	if m != nil {
		return m.UserContext
	}
	return nil
}

func (m *StopGroupRequest) GetGroupID() int32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *StopGroupRequest) GetOrgID() int32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

type GroupStoppedResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupStoppedResponse) Reset()         { *m = GroupStoppedResponse{} }
func (m *GroupStoppedResponse) String() string { return proto.CompactTextString(m) }
func (*GroupStoppedResponse) ProtoMessage()    {}
func (*GroupStoppedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_coordinatorservicer_66ba6e5c35041122, []int{3}
}
func (m *GroupStoppedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupStoppedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupStoppedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GroupStoppedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupStoppedResponse.Merge(dst, src)
}
func (m *GroupStoppedResponse) XXX_Size() int {
	return m.Size()
}
func (m *GroupStoppedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupStoppedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GroupStoppedResponse proto.InternalMessageInfo

func (m *GroupStoppedResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*StartGroupRequest)(nil), "coordinator.StartGroupRequest")
	proto.RegisterType((*GroupStartedResponse)(nil), "coordinator.GroupStartedResponse")
	proto.RegisterType((*StopGroupRequest)(nil), "coordinator.StopGroupRequest")
	proto.RegisterType((*GroupStoppedResponse)(nil), "coordinator.GroupStoppedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoordinatorClient interface {
	StartGroup(ctx context.Context, in *StartGroupRequest, opts ...grpc.CallOption) (*GroupStartedResponse, error)
	StopGroup(ctx context.Context, in *StopGroupRequest, opts ...grpc.CallOption) (*GroupStoppedResponse, error)
}

type coordinatorClient struct {
	cc *grpc.ClientConn
}

func NewCoordinatorClient(cc *grpc.ClientConn) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) StartGroup(ctx context.Context, in *StartGroupRequest, opts ...grpc.CallOption) (*GroupStartedResponse, error) {
	out := new(GroupStartedResponse)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/StartGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) StopGroup(ctx context.Context, in *StopGroupRequest, opts ...grpc.CallOption) (*GroupStoppedResponse, error) {
	out := new(GroupStoppedResponse)
	err := c.cc.Invoke(ctx, "/coordinator.Coordinator/StopGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServer is the server API for Coordinator service.
type CoordinatorServer interface {
	StartGroup(context.Context, *StartGroupRequest) (*GroupStartedResponse, error)
	StopGroup(context.Context, *StopGroupRequest) (*GroupStoppedResponse, error)
}

func RegisterCoordinatorServer(s *grpc.Server, srv CoordinatorServer) {
	s.RegisterService(&_Coordinator_serviceDesc, srv)
}

func _Coordinator_StartGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).StartGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/StartGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).StartGroup(ctx, req.(*StartGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_StopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).StopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.Coordinator/StopGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).StopGroup(ctx, req.(*StopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coordinator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coordinator.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGroup",
			Handler:    _Coordinator_StartGroup_Handler,
		},
		{
			MethodName: "StopGroup",
			Handler:    _Coordinator_StopGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator/coordinatorservicer.proto",
}

func (m *StartGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCoordinatorservicer(dAtA, i, uint64(m.UserContext.Size()))
		n1, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoordinatorservicer(dAtA, i, uint64(m.GroupID))
	}
	if m.OrgID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCoordinatorservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupStartedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupStartedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StopGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserContext != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCoordinatorservicer(dAtA, i, uint64(m.UserContext.Size()))
		n2, err := m.UserContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCoordinatorservicer(dAtA, i, uint64(m.GroupID))
	}
	if m.OrgID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCoordinatorservicer(dAtA, i, uint64(m.OrgID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupStoppedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupStoppedResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCoordinatorservicer(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCoordinatorservicer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StartGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovCoordinatorservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovCoordinatorservicer(uint64(m.GroupID))
	}
	if m.OrgID != 0 {
		n += 1 + sovCoordinatorservicer(uint64(m.OrgID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupStartedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StopGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserContext != nil {
		l = m.UserContext.Size()
		n += 1 + l + sovCoordinatorservicer(uint64(l))
	}
	if m.GroupID != 0 {
		n += 1 + sovCoordinatorservicer(uint64(m.GroupID))
	}
	if m.OrgID != 0 {
		n += 1 + sovCoordinatorservicer(uint64(m.OrgID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupStoppedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCoordinatorservicer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCoordinatorservicer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCoordinatorservicer(x uint64) (n int) {
	return sovCoordinatorservicer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StartGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupStartedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupStartedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupStartedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserContext == nil {
				m.UserContext = &prototypes.UserContext{}
			}
			if err := m.UserContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupStoppedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoordinatorservicer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupStoppedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupStoppedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoordinatorservicer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCoordinatorservicer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoordinatorservicer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoordinatorservicer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoordinatorservicer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCoordinatorservicer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCoordinatorservicer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCoordinatorservicer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCoordinatorservicer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoordinatorservicer   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("coordinator/coordinatorservicer.proto", fileDescriptor_coordinatorservicer_66ba6e5c35041122)
}

var fileDescriptor_coordinatorservicer_66ba6e5c35041122 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0xbf, 0xf9, 0xa4, 0x4a, 0x27, 0x2e, 0x74, 0xa8, 0x12, 0x0a, 0x86, 0x5a, 0x10, 0xba,
	0x71, 0x22, 0xf5, 0x0d, 0x6c, 0x40, 0xba, 0x90, 0x42, 0x8a, 0x1b, 0x77, 0x69, 0x7a, 0x89, 0x83,
	0x26, 0x77, 0x9c, 0x99, 0x88, 0xbe, 0x89, 0x2f, 0xe1, 0x7b, 0xb8, 0xf4, 0x11, 0x24, 0xbe, 0x88,
	0x38, 0x9a, 0x66, 0xa2, 0x5d, 0xbb, 0xcb, 0xfd, 0x93, 0x73, 0xcf, 0xfc, 0x38, 0xf4, 0x28, 0x45,
	0x54, 0x4b, 0x51, 0x24, 0x06, 0x55, 0xe8, 0x7c, 0x6b, 0x50, 0xf7, 0x22, 0x05, 0xc5, 0xa5, 0x42,
	0x83, 0xcc, 0x73, 0x46, 0xfd, 0x3d, 0xdb, 0x33, 0x8f, 0x12, 0x74, 0x58, 0xea, 0x7a, 0x67, 0xa8,
	0xe9, 0xee, 0xdc, 0x24, 0xca, 0x9c, 0x2b, 0x2c, 0x65, 0x0c, 0x77, 0x25, 0x68, 0xc3, 0x38, 0xf5,
	0x2e, 0x35, 0xa8, 0x09, 0x16, 0x06, 0x1e, 0x8c, 0x4f, 0x06, 0x64, 0xe4, 0x8d, 0xb7, 0xb9, 0xd3,
	0x8b, 0xdd, 0x05, 0xe6, 0xd3, 0x2d, 0xfb, 0xff, 0x34, 0xf2, 0xff, 0x0f, 0xc8, 0xa8, 0x13, 0xd7,
	0x25, 0xeb, 0xd1, 0xce, 0x4c, 0x65, 0xd3, 0xc8, 0xdf, 0xb0, 0xfd, 0xaf, 0x62, 0xb8, 0x4f, 0x7b,
	0x76, 0xc1, 0x5e, 0x86, 0x65, 0x0c, 0x5a, 0x62, 0xa1, 0x61, 0xa8, 0xe8, 0xce, 0xdc, 0xa0, 0xfc,
	0x53, 0x2f, 0x27, 0x2b, 0x2f, 0x28, 0x65, 0xe3, 0xe5, 0x53, 0x27, 0x07, 0xad, 0x93, 0x0c, 0xec,
	0xcd, 0x6e, 0x5c, 0x97, 0xe3, 0x67, 0x42, 0xbd, 0x49, 0x43, 0x96, 0xcd, 0x28, 0x6d, 0x10, 0xb2,
	0x80, 0x3b, 0xd4, 0xf9, 0x2f, 0xb6, 0xfd, 0xc3, 0xd6, 0x7c, 0x1d, 0x06, 0x76, 0x41, 0xbb, 0x2b,
	0x0c, 0xec, 0xe0, 0x87, 0x5e, 0x1b, 0xcf, 0x7a, 0xb9, 0xd6, 0x4b, 0xce, 0xa2, 0x97, 0x2a, 0x20,
	0xaf, 0x55, 0x40, 0xde, 0xaa, 0x80, 0x3c, 0xbd, 0x07, 0xff, 0xae, 0xc6, 0x99, 0x30, 0xd7, 0xe5,
	0x82, 0xa7, 0x98, 0x87, 0xb7, 0xa2, 0xb8, 0x49, 0xc4, 0xb1, 0xc0, 0x30, 0xc9, 0x43, 0x9b, 0x89,
	0xf4, 0x3b, 0x46, 0xda, 0x8d, 0xd6, 0x62, 0xd3, 0xce, 0x4e, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x87, 0x21, 0x15, 0x38, 0x7c, 0x02, 0x00, 0x00,
}
